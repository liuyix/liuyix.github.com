<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Liuyix]]></title>
  <link href="http://liuyix.org/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://liuyix.org/"/>
  <updated>2015-04-06T00:58:06+08:00</updated>
  <id>http://liuyix.org/</id>
  <author>
    <name><![CDATA[liuyix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[makefile简单入门]]></title>
    <link href="http://liuyix.org/blog/2012/write-simple-makefile/"/>
    <updated>2012-02-20T04:02:00+08:00</updated>
    <id>http://liuyix.org/blog/2012/write-simple-makefile</id>
    <content type="html"><![CDATA[<blockquote><p>在linux上混了这么久，真成混的了，连makefile都没有学习过，惭愧啊～作为makefile的快速入门指南，本文是我个人学习makefile时做的笔，此为第一篇。后续会有更加详细深入的学习总结。</p></blockquote>

<h2>导言</h2>

<p>make程序可以算得上是一个domain specific language，完全是一个完整的脚本语言，make是linux,unix上编译 <strong>等</strong> 工作的标准工具，对于复杂的程序来说，可以智能的、自动化完成复杂的程序编译工作。而需要就是编写一个directive的脚本——makefile告诉编译器和其他工具应该如何编译project。 本篇是陈皓写的“跟我一起写makefile”的第一部分的总结，比较凌乱…</p>

<h2>学习资料</h2>

<ul>
<li>陈皓——“跟我一起写makefile”</li>
<li>how to write a simple makefile<!-- more --></li>
</ul>


<h2>makefile的最基本编写规则</h2>

<pre><code>target : prerequisites
    command
</code></pre>

<p>这个就是makefile最基本的编写规则，后续的讲解以及makefile的更多写法不过是为了进一步简化这个规则的编写。也就是说你只要把这个规则弄懂了，makefile你就会写了，和makefile高手，你差得就是一些技巧和高级用法了。但起码你会写makefile了。</p>

<ul>
<li><p><strong>target</strong> 就是要构建的目标——可以是C/C++的object，可以是目标程序，也可以是一个标签。</p></li>
<li><p><strong>prerequistites</strong> 是构建 <strong>target</strong> 需要的文件。对object来说，它也许是c，c++源文件； <strong>target</strong> 是目标程序，那么它就是object文件（.o文件）</p></li>
<li><p><strong>command</strong> 是将 <strong>prerequistites</strong> 变成 <strong>target</strong> 的方法</p></li>
</ul>


<p>一言以弊之，target是output,prerequisites是输入，command是过程方法。 值得注意的是command必须以一个TAB键作为开始，否则会出现"遗漏分隔符。停止"的错误。</p>

<h3>hello-makefile的makefile</h3>

<p>首先编写一个hello-makefile.c，内容我想就不用我写了吧…之后在存放hello-makefile的目录下创建一个 <em>Makefile</em>文件(注意没有扩展名)。 Makefile内容如下：</p>

<p>```makefile</p>

<pre><code>hello-makefile:hello-makefile.o
    cc -o hello-makefile hello-makefile.o
hello-makefile.o: hello-makefile.c
    cc -o hello-makefile.o hello-makefile.c
clean:
    rm *.o hello-makefile
</code></pre>

<p>```</p>

<h2>TAB键、反斜杠(/)</h2>

<ul>
<li><p>TAB键在makefile中是command开头的分割符，这在前文已有讲述。</p></li>
<li><p>反斜杠（/）用来断行，即一行没有写下或者为了美观而将 <code>command</code> 或者 <code>prerequistites</code> 拆成几行来写。刚学习写makefile时可能会忘掉而出现错误。</p></li>
</ul>


<h2>make不仅仅可以做编译</h2>

<p>target可以是目标文件、二进制程序，也可以是一个label，后面没有prerequisites，可以让makefile如同shellscript一样完成其他工作（备份、打包）。比如说我们经常使用的 <code>make clean</code> 实际上是利用make完成shell脚本一样的工作。</p>

<h2>使用变量，简化书写，减少bug</h2>

<pre><code>objects = main.o kbd.o command.o display.o \
insert.o search.o files.o utils.o
</code></pre>

<p>以后使用时就使用 <strong>$(objects)</strong></p>

<h2>自动推导</h2>

<p><strong>.PHONY</strong> 表示clean是一个伪目标文件</p>

<h2>编写makefile好习惯</h2>

<p>每个makefile中都 <em>应该</em> 定义一个clean命令，用于清空从前的编译产生的文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs23 字体配置]]></title>
    <link href="http://liuyix.org/blog/2011/howto-config-font-in-emacs23-2/"/>
    <updated>2011-12-16T21:22:00+08:00</updated>
    <id>http://liuyix.org/blog/2011/howto-config-font-in-emacs23-2</id>
    <content type="html"><![CDATA[<h2>Update 2013-3-16</h2>

<h3>字体设置没有可移植性</h3>

<p>在多个机子上迁移emacs时需要将字体设置部分注释掉，不然会出现 <em>emacs正常启动，但是配色显示不正常</em>的现象。</p>

<h3>更傻瓜的设置方式</h3>

<p>全部用界面菜单操作更方便。</p>

<ol>
<li><code>Options</code> &mdash;> <code>Set Default Font</code></li>
<li>选择满意的字体之后，保存设置 <code>Options</code> &mdash;> <code>Save options</code></li>
</ol>


<hr />

<blockquote><p>前几天使用org2blog出了一些莫名的问题，经过一系列的折腾（编译安装emacs,源码安装org-mode），还是没有搞清楚问题出在哪儿了，但是现在org2blog又不明原因的恢复正常了！（对emacs不了解的人伤不起啊，有时间一定要仔细研究下）</p></blockquote>

<p>emacs23中默认的字体很小,此文告诉你如何用最"业余"也是很简便的方式添加修改emacs配置～</p>

<!-- more -->


<ol>
<li><p> 打开emacs，菜单栏中选择 <strong>Options</strong> –> <strong>Set Default Font…</strong></p></li>
<li><p> 在弹出的对话框中挑选好字体以及大小</p></li>
<li><p> 在任意文本下,将光标停在修改后的文字上面</p></li>
<li><p> 输入命令:</p>

<p>M-x describe-font</p></li>
<li><p> 复制 <strong>name(open by):</strong> 后面的内容，比如说是</p>

<p><code>-unknown-DejaVu Sans Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1</code></p></li>
<li><p> 根据(5)，将</p>

<p><code>(set default-font "-unknown-DejaVu Sans Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")</code></p></li>
</ol>


<p>这一句添加到 <em>.emacs</em>配置文件中</p>

<ol>
<li> 重启emacs就会看到效果！</li>
</ol>


<p>Gook luck!</p>

<h3>参考文章</h3>

<p><a href="http://blog.waterlin.org/articles/%E8%AE%BE%E7%BD%AEemacs%E7%9A%84%E5%AD%97%E4%BD%93.html">设置Emacs的字体</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFS的构建过程---LFS实践总结(一)]]></title>
    <link href="http://liuyix.org/blog/2011/building-lfs-summary-a/"/>
    <updated>2011-07-28T18:02:44+08:00</updated>
    <id>http://liuyix.org/blog/2011/building-lfs-summary-a</id>
    <content type="html"><![CDATA[<p><img src="http://www.linuxfromscratch.org/images/lfs-logo.png" alt="" /></p>

<p>LFS是"Linux From Scratch"的简写，"from scratch"的本义是“从头开始”，这里应该是引申义,&ldquo;从源代码构建"。</p>

<p>LFS的主页上介绍为"Linux From Scratch (LFS) is a project that provides you with step-by-step instructions for building your own customized Linux system entirely from source.&ldquo;更多详细的介绍可以移步到<a href="http://www.linuxfromscratch.org/lfs/">LFS Project Homepage</a>看看。</p>

<p>LFS主要的意义在于"教学"上，通过自己动手构建能更深入的认识linux，了解linux的运行原理。通过自己动手，还可以增强Linux上的操作水平。对于Linux的新手，LFS可能是一项比较“痛苦”的学习过程，因为你要使用大量的命令;对于使用过Linux一段时间的用户来说，构建LFS可以将Linux的零散的认识串起来，增强Linux的整体认识。</p>

<p>构建LFS的主要困难，我觉得对一看到E文就头大的童鞋来说，的确是nightmare。但我想喜爱折腾的，尤其是喜欢Linux的，E文都不会是大问题。除了语言的问题之外，得益于LFS文档的详尽和完美，我在构建的过程中没有遇到什么问题，很顺利。所以我觉得还是要认真读文档理解好就没什么问题。</p>

<!-- more -->


<h2>简要的LFS构建过程</h2>

<p>在分析构建过程之前，有必要说明下一些LFS-BOOK中重要的词汇。</p>

<ul>
<li><p>toolchain:工具链，这是构建LFS中最重要的一个组成部分。它包含了编译程序的必要工具集，其中包括了assembler(汇编编译器)、compiler(编译器)、linker(链接器)等等。回忆一下在计算机的基础课程（操作系统、组成原理）讲述的构建程序的从源代码编辑到程序运行的完整过程，在这个过程中就用到了这些工具。只要保证了toolchain的正确无误，LFS的构建就成功了一大半了。</p></li>
<li><p>utilities:即我们在shell中各种linux工具。也包括构建程序所需要的一些必要的二进制工具。</p></li>
</ul>


<p>为了在不同发行版上尝试构建LFS可以有结果一致性，即能参考同一个文档得到大致相同的结果(成功或者错误显示)，也为了达到少出错误的目的，采用了类似cross compile的方式的构建系统，简单讲就是多次的调整toolchain。</p>

<h3>LFS的构建步骤：</h3>

<ol>
<li><p>  通过现有的toolchain环境，编译出“new and host-independent toolchain”。之所以这样是要保证后面的构建过程尽可能少的出错误，也可以保证在不同环境下进行的构建能有一个操作结果一致性的保障。</p></li>
<li><p> 通过新的toolchain编译必要的工具(utilities)。第1步和第2步是第5章的主要内容。</p></li>
<li><p> 通过以上2步实际上LFS的“地基”已经打好，下一步就要开始在上面“盖楼”了，这是第6章要做的工作。首先是进入mini Linux system(准备好环境后，通过chroot命令)，之后开始安装packages，（此过程相当于使用live-cd安装linux的过程，不同的是这里使用的是手动编译安装所有的package,而使用live-cd的安装过程是把已经编译好的packages复制到指定位置），<strong>要理解linux的运行原理，实际就是理解Linux运行所需要的所有package的功能和内容。</strong></p></li>
<li><p> 所有的package已经搭建好，现在还缺少引导程序，即启动脚本bootscript，这是第7章所讲的内容，通过启动脚本将package粘合在一起组成一个完整的系统。这其中比较重要的是udev的运行原理，其他的还有bootscripts,localtime,console,inputrc,bash,network。</p></li>
<li><p>  最后的步骤就是编译内核并将新的内核添加到grub启动菜单中。</p></li>
</ol>


<p>LFS的编译toolchain构建的顺序大体上是一样的：</p>

<blockquote><p>Linux-<version> API Headers&mdash;&ndash;>Glibc&mdash;&ndash;>Binutils&mdash;&ndash;>GCC&mdash;&ndash;>Utilities/Programs</p></blockquote>

<p>这个顺序不能变。</p>

<ol>
<li><p> 将KERNEL对上层的“通信接口”&mdash;API接口 expose出来</p></li>
<li><p> 通过API接口构建C库函数接口，Glibc提供了基本的管理内存、搜索目录、对文件的各种操作等功能</p></li>
<li><p> Binutils提供了linker,assembler以及其他管理对象文件的工具</p></li>
<li><p> GCC：C/C++编译器</p></li>
<li><p> 至此就完成了toolchain的部署，其他软件都可以通过这个toolchain编译安装了。</p></li>
</ol>


<p>这里列出的顺序相对位置是一定的，实际的构建过程还会设计一些细节，如GCC编译前需要编译MPFR，MPC等数学库函数</p>

<p>进一步概括LFS的构建过程就是先构建"干净的"toolchain，再通过toolchain编译必要的程序，然后编写启动脚本,编译kernel，最后将LFS添加到GRUB引导菜单中。是的，原理就是这么简单，难就难在面对一个实际系统构建中的各种细节。</p>

<p>我想将LFS弄明白的含义就是"我知道1)如何编译程序2)toolchain的构建过程3)Linux运行中重要的工具有哪些都有什么用4)重要的脚本配置。理解弄清这些内容，就可以进一步的玩转Linux！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 10.04.2上编译安装MySQL 5.5.11]]></title>
    <link href="http://liuyix.org/blog/2011/install-mysql-on-ubuntu-10-04-from-source/"/>
    <updated>2011-05-07T05:45:02+08:00</updated>
    <id>http://liuyix.org/blog/2011/install-mysql-on-ubuntu-10-04-from-source</id>
    <content type="html"><![CDATA[<h2>Update: 2013-09-28</h2>

<p><blockquote><p>这篇文章是在2011年，目前已经过时。这篇文章只作为存档保留。</p><footer><strong>liuyix</strong></footer></blockquote></p>

<hr />

<p>由于我之前安装其他的软件时，已经安装了mysql的开发相关的lib，因此编译安装MySQL不是很顺利。具体的错误神马的，就不提了（也没记住多少……）应该都是个例。总结起来一句话就是——尽量在你安装Mysql前电脑尽量保持clean(一些mysql的开发包一类的最好先卸载)。</p>

<!-- more -->


<p>有一些童鞋可能会问在ubuntu里apt不是可以完全搞定吗，为什么要这么费事的编译安装？我的原因：对我来说用ubuntu，用linux就是了解细枝末节，更深入的理解OS，也就是“折腾”，apt-get install是很好很强大，但这种方法提供便利的同时也阻碍了你去了解linux上软件构建的过程，这种方法同WIndows上下载安装包装软件还简单（起码在WIN上你还知道什么东西放在哪儿了）。通过从源代码编译安装，你就有了一个了解Linux上软件构建部署的机会，可以收获更多。同时在这过程中你也可以将mysql部署到任何位置，同时又可以用到比repo里更新的版本。</p>

<p>正题：</p>

<p>步骤：</p>

<ol>
<li><p> 编译前的准备工作</p></li>
<li><p> 初识CMAKE——配置MySQL编译选项</p></li>
<li><p> 编译安装</p></li>
<li><p> 安装后的MySQL配置</p></li>
<li><p> 设置开机自动启动MySQL服务</p></li>
</ol>


<!-- more -->


<h2>一、编译前的准备工作</h2>

<ul>
<li><p>官方网站下载Source Code（<a href="http://dev.mysql.com/downloads/mysql/#downloads">点此进入下载页</a>）选择Source Code&mdash;>Generic Linux(mysql-VERSION.tar.gz)（PS：chrome访问此页，可能会遇到显示不正常的情况，建议换FF访问）</p></li>
<li><p>建议有兴趣的童鞋读一读解压后的mysql目录下的相关文档，有许多重要的信息。比如此文以及大部分的类似文章都参考自INSTALL-SOURCE文档。</p></li>
<li><p>创建mysql用户以及用户组，方便管理</p></li>
</ul>


<p><code>
sudo groupadd mysql
sudo useradd -r -g mysql mysql
</code></p>

<h2>二、初识CMAKE——配置MySQL编译选项</h2>

<p>MySQL 5.5的编译工具由Autotool转变为了cmake（有关于更多关于cmake的信息，请大家自行google了解）。MySQL团队也撰写了一篇<a href="http://forge.mysql.com/wiki/Autotools_to_CMake_Transition_Guide">Autotools to CMake Transition Guide</a>,本文将要列出的各个编译选项以及更多的编译选项的说明可以参考该文档。在troubleshooting时，此文档更是不得不看。编译时我习惯于一些选项（比如安装位置）不按默认的来，因为如果按默认选项出了问题，更不好解决（因为到时你不仅需要知道到底有选项有何含义还要知道默认的是什么，反而更麻烦）。进入解压的源代码目录<code>mysql-VERSION</code></p>

<p><code>makefile
cmake . \
-DCMAKE_INSTALL_PREFIX=/usr/mysql \
-DMYSQL_DATADIR=/usr/mysql/data
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci \
-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \
-DWITH_DEBUG=0 \
-DWITH_INNOBASE_STORAGE_ENGINE=1
</code></p>

<table>
<thead>
<tr>
<th></th>
<th> 选项名称 </th>
<th> 选项含义</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> DCMAKE_INSTALL_PREFIX </td>
<td> 安装路径</td>
</tr>
<tr>
<td></td>
<td> DMYSQL_DATADIR </td>
<td> 数据库路径</td>
</tr>
<tr>
<td></td>
<td> DDEFAULT_CHARSET </td>
<td> 默认字符</td>
</tr>
<tr>
<td></td>
<td> DDEFAULT_COLLATION </td>
<td> 默认字符集</td>
</tr>
<tr>
<td></td>
<td> DMYSQL_UNIX_ADDR </td>
<td> 连接数据库socket路径</td>
</tr>
<tr>
<td></td>
<td> DWITH_DEBUG </td>
<td> bool值，表示是否开启debug模式</td>
</tr>
</tbody>
</table>


<p>在这里我开始的时候有一个疏忽：<strong>只设置DDEFAULT_CHARSET而没有设置DDEFAULT_COLLATION</strong>，因此总是出现</p>

<p><code>COLLATION 'latin1_swedish_ci' is not valid for CHARACTER SET 'utf8'</code></p>

<h2>三、编译安装</h2>

<p><code>bash
sudo make &amp;&amp; make install
</code></p>

<p>这个阶段出现的问题概率较小。但是记得一定要以<strong>root权限执行make和make install</strong>，因为填写的安装路径不是home，而是/usr，必须有root权限才能进行写操作。</p>

<h2>四、安装后的MySQL配置</h2>

<p>出问题的地方主要是在这里。出现问题的根源在于<strong>配置文件</strong>以及默认配置。由于是源代码安装且安装的位置不是默认位置，因此有一些选项必须制定才能使MySQL正常运行</p>

<ul>
<li>进入安装后的目录执行</li>
</ul>


<p><code>bash
sudo chown -R mysql .
chgrp -R mysql .
</code></p>

<ul>
<li>执行以下命令：</li>
</ul>


<p><code>
sudo bin/scripts/mysql_install_db \
--user=mysql \
--basedir=/usr/mysql \
--datadir=/usr/mysql/data \
--no-defaults
</code></p>

<p>切记后面有个&mdash;no-defaults选项，如果没有该选项，则程序会自动载入默认的配置文件，而目前你还没有完成配置文件的编写，因此很可能载入的是错误的信息。 <br/>
如果该指令能够运行成功，那么恭喜你，你的MySQLy可以成功的启动了。如果这一步出现了错误，不要着急，相关的log以及mysqld的启动信息提供了足够的信息帮助你trouble shooting（我就是这么过来的&hellip;）完成之后再执行</p>

<p><code>
chown -R root .
chown -R mysql data
</code></p>

<p>这两条指令应该是安全性考虑。</p>

<ul>
<li>配置my.cnf——mysql的配置文件，这是很重要的一步，配置得当以后就不需要在启动时写上大段的参数了。
首先应该知道：MySQL寻找配置文件的路径以及顺序。最开始检索的位置是<code>/etc/my.cnf</code>之后是<code>/etc/mysql/my.cnf</code>因此我们要做的就是在这两个地方之一建立配置文件my.cnf。MySQL为我们准备了几种不同方案的默认配置文件（在/usr/mysql/support-files/中），因此我们可以复制一份到上述的位置<code>sudo cp /usr/mysql/support-files/my-medium.cnf /etc/mysql/my.cnf</code></li>
</ul>


<p>通常我们是通过脚本传入适当的参数启动mysqld。因此在/etc/my.cnf中加入如下的内容：</p>

<p><code>
[mysqld]
basedir=/usr/mysql
datadir=/usr/mysql/data
user=mysql
</code></p>

<p>更多关于my.cnf的配置限于篇幅就不再讲了，但为了日常的开发需要还应该继续配置的，这部分内容就参考google搜索以及MySQL Manual吧</p>

<h2>五、设置开机自动启动MySQL服务</h2>

<p>这一部分讲解如何添加MySQL在开机时自动启动。MySQL Manual关于此部分的内容不准确，没有涵盖debian类的linux发行版的做法。</p>

<p>MySQL已经提供了默认的脚本mysql.server（在<code>mysql安装目录</code>/support-files/），首先进入该目录，尝试运行该脚本<code>sudo ./mysql.server start</code></p>

<p>运行正常的话则执行<code>sudo cp mysql.server /etc/init.d/mysql</code></p>

<p>Debian/Ubuntu上开机启动服务的管理不是使用chkconfig，而使用的是sysv-rc-conf，尝试执行<code>sudo sysv-rc-conf</code></p>

<p>若提示没有安装，则<code>sudo apt-get install sysv-rc-conf</code>，之后运行即可，该工具采用的是图形界面，很直观在此就不介绍如何使用了，我们需要做的是找到【mysql】一栏，选定【3】【4】【5】这三列，这样就完成了开机自动启动MySQL daemon了。</p>

<p><strong>MySQL的安装就基本完成了，希望大家能和我一样在“折腾”的过程中有所收获，“痛并快乐着”！</strong></p>

<h2>参考链接：</h2>

<ul>
<li><p><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=44&amp;t=319251">mysql 5.5.9 编译过程中都问题 by flycatcn</a></p></li>
<li><p><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=44&amp;t=319886">用源码编译安装MYSQL5.5到ubuntu10.10上by winksir</a></p></li>
<li><p><a href="http://dev.mysql.com/doc/refman/5.5/en/charset-server.html">MySQL 5.5 Reference Manual &mdash;Server Character Set and Collation</a></p></li>
<li><p><a href="http://dev.mysql.com/doc/refman/5.5/en/mysqld-safe.html">MySQL 5.5 Reference Manual &mdash;mysqld_safe</a></p></li>
<li><p><a href="http://dev.mysql.com/doc/refman/5.5/en/option-files.html">MySQL 5.5 Reference Manual &mdash;Using Option Files</a></p></li>
<li><p><a href="http://dev.mysql.com/doc/refman/5.5/en/automatic-start.html">Starting and Stopping MySQL Automatically</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现vim下的STL自动补全]]></title>
    <link href="http://liuyix.org/blog/2011/vim-stl-auto-complete/"/>
    <updated>2011-05-03T05:10:50+08:00</updated>
    <id>http://liuyix.org/blog/2011/vim-stl-auto-complete</id>
    <content type="html"><![CDATA[<p>vim的强大之处就在于可扩展性，换句话说就是“禁得起折腾”，不同于IDE的相对固定的快捷键等等设置。如果把IDE比作是豪华住宅，那么vim就是一个空荡荡的一座房屋，你必须要自己动手装潢，工具就是你对装潢的了解以及你的创造力，你的想象力。所以最后这个住宅能不能比上豪华住宅或者能否让你住的舒服完全要看你的动手能力了，呵呵，很激动人心的挑战啊（很适合喜欢DIY的coder  :-D ）</p>

<p>进入正题：vim中有一个非常有名的plugin——<a href="http://www.vim.org/scripts/script.php?script_id=1520">omniCppComplete</a>（以下简称omni）,加上这个插件就可以实现自动补全struct,namespace的成员（实际也是应用强大的ctags），不过郁闷的是omni不支持STL的自动补全。这难不倒众多喜爱DIY的coder。<!-- more --><strong>仔细阅读omn的帮助文档，</strong>你会发现实际上作者已经给出了如何让其自动不全STL（在FAQ中有提到），不过该方法还是很繁琐。幸运的是，已经有热心的coder为我们制作了相应的“插件补丁”——<strong><a href="http://www.vim.org/scripts/script.php?script_id=2358">tags for std c++ (STL, streams, &hellip;)</a></strong>，按照说明步骤一步一步操作就可以完成了。</p>

<p>具体方法：</p>

<ol>
<li><p> 将下载的压缩包cpp_src.tar.bz2解压，比如解压到 <em>~/src</em> <code>tar -jxf cpp_src.tar.bz2 -d ~/src</code></p></li>
<li><p> 打开终端，将work directory定位到~/src,然后运行以下命令<code>ctags -R --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ cpp_src</code></p></li>
<li><p> 将生成的tags重命名：<code>mv tags a-new-name-tags</code></p></li>
<li><p> 在vim的环境中执行<code>:set tags+=/my/path/to/tags/cpp</code></p></li>
</ol>


<p>这样就可以在代码中自动补全STL代码了！Good Luck!</p>

<p>参考链接：<a href="http://www.vim.org/scripts/script.php?script_id=2358">http://www.vim.org/scripts/script.php?script_id=2358</a></p>

<p>尚未解决的问题：目前此插件只能实现对".&ldquo;&rdquo;&ndash;>&ldquo;等的补全，但是不能补全&rdquo;::&ldquo; :&ndash;(</p>
]]></content>
  </entry>
  
</feed>
