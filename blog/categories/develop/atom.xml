<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Develop | Liuyix]]></title>
  <link href="http://liuyix.org/blog/categories/develop/atom.xml" rel="self"/>
  <link href="http://liuyix.org/"/>
  <updated>2015-10-22T08:26:53+08:00</updated>
  <id>http://liuyix.org/</id>
  <author>
    <name><![CDATA[liuyix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[docopt -- Python必备的命令行接口模块]]></title>
    <link href="http://liuyix.org/blog/2015/python-docopt/"/>
    <updated>2015-10-21T00:02:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/python-docopt</id>
    <content type="html"><![CDATA[<p>docopt很适合经常需要用python写命令行工具的同学使用。</p>

<h2>docopt之前</h2>

<p>工作需要，经常会用大块的代码来定(ren)义(rou)命令行界面的工具。代码经常是如下的样子：</p>

<p>```python</p>

<p>import optparse</p>

<p>parser = optparse.OptionParser()
parser.add_option(&lsquo;&mdash;foo&rsquo;, &lsquo;-f&rsquo;, default=&lsquo;1&rsquo;, type=&lsquo;int&rsquo;)
parser.add_option(&lsquo;&mdash;bar&rsquo;, &lsquo;-b&rsquo;, action=&lsquo;store_true&rsquo;)</p>

<h1>类似以上的代码大概几十行</h1>

<p>opts, args = parser.parse_args()</p>

<p>```</p>

<p>每一个python脚本都需要提供类似的接口。因此每一次都需要写类似的代码。在写过几次后为了保持DRY原则，我将初始化parser封装为一个method放在util部分。可是依旧是逃不过重复的写<code>parser.add_option</code>。不止一次地我考虑干脆自己写个模板类，以后命令行的定义直接以配置文件的形式写出来，然后每次都通过读取这个配置文件自动化的去生成parser。我相信这个问题我一定不是第一个遇到，应该会有已知的模块解决这个laber intensive的工作。</p>

<p>正在这个时候，偶然看到Python weekly发现了docopt</p>

<h2>docopt</h2>

<p>docopt官网地址：<a href="http://docopt.org/">http://docopt.org/</a></p>

<p>docopt的作者有一个30分钟的视频很好的介绍了docopt这个moudule。推荐大家看一下，自备梯子~ <a href="https://youtu.be/pXhcPJK5cMc">https://youtu.be/pXhcPJK5cMc</a></p>

<p>更令懒人们惊喜的是作者还制作了一个js版本的docopt，可以让你在浏览器中把玩docopt： <a href="http://try.docopt.org/">http://try.docopt.org/</a></p>

<p>使用docopt后，代码上会更加Pythonic，具有很高的可读性，命令行接口的定义所见即所得的样式：</p>

<p>```</p>

<h1>docopt example</h1>

<p>mydoc = &ldquo;&rdquo;&ldquo;Naval Fate.</p>

<p>Usage:
  naval_fate.py ship new <name>&hellip;
  naval_fate.py ship <name> move <x> <y> [&mdash;speed=<kn>]
  naval_fate.py ship shoot <x> <y>
  naval_fate.py mine (set|remove) <x> <y> [&mdash;moored|&mdash;drifting]
  naval_fate.py -h | &mdash;help
  naval_fate.py &mdash;version</p>

<p>Options:
  -h &mdash;help     Show this screen.
  &mdash;version     Show version.
  &mdash;speed=<kn>  Speed in knots [default: 10].
  &mdash;moored      Moored (anchored) mine.
  &mdash;drifting    Drifting mine.
&ldquo;&rdquo;"</p>

<p>from docopt import docopt</p>

<p>arguments = docopt(mydoc, version=&lsquo;0.1&rsquo;)</p>

<p>print arguments
```</p>

<p>这样就定义了一个丰富的命令行接口。命令行接口提供了<code>--help</code>和<code>--version</code>两个基础功能。其中<code>--help</code>输出<code>mydoc</code>，<code>--version</code>输出指定的<code>version</code>信息。</p>

<p>接口还提供了2个参数（ship, mine），每种参数还提供了不同的几种参数的组合。其中<code>[...]</code>内是可选参数，<code>(...|...)</code>是互斥参数。</p>
]]></content>
  </entry>
  
</feed>
