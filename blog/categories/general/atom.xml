<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General | 刘毅同学]]></title>
  <link href="http://liuyix.org/blog/categories/general/atom.xml" rel="self"/>
  <link href="http://liuyix.org/"/>
  <updated>2015-12-17T07:11:19+08:00</updated>
  <id>http://liuyix.org/</id>
  <author>
    <name><![CDATA[liuyix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git workflow]]></title>
    <link href="http://liuyix.org/blog/2015/git-workflow/"/>
    <updated>2015-04-05T23:30:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/git-workflow</id>
    <content type="html"><![CDATA[<p>Git近几年有逐渐取代svn的趋势，一部分原因是github的风靡，google code也关门大吉，令人唏嘘<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。很多公司开始逐渐从svn代码仓库迁移到企业私有版的github&mdash;<a href="https://gitlab.com/">gitlab</a>。知道怎么玩git是大势所趋。</p>

<p>Git小白推荐读物：atlassian出版的<a href="https://www.atlassian.com/git/tutorials">Git Tutorials</a>，这家公司拥有mac上最佳git客户端SourceTree以及Bitbucket。</p>

<p>本文是对<a href="https://www.atlassian.com/git/tutorials/comparing-workflows">Comparing Workflows</a>这篇文章和自己的使用心得所做的总结。</p>

<p>以下三种工作流只是典型的代表，不是规范，而是参考，可以结合自己的使用特点灵活选择和修改。</p>

<ul>
<li>Centralized Workflow</li>
<li>Feature Branch Workflow</li>
<li>Gitflow</li>
</ul>


<!--more-->


<h3>Centralized Workflow</h3>

<ul>
<li>适合几个人的小项目或者自己玩。</li>
<li>和svn差别小。</li>
<li>多人协作采用rebase方式并入master。

<ul>
<li>小李和小红分别把代码拉到本地进行开发，然后小李先提交到了master，这时候小红再提交她的修改会被reject，因为push的过程中小红本地的Master分支和remote（服务器）上的不同。这时候小红需要<code>git pull --rebase origin master</code>将远程的代码和她本地的修改进行融合，融合的目的是让小红提交的所有的commit看起来实在小李同学push到master分支后的那个点开始做的。</li>
</ul>
</li>
</ul>


<p><img src="https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/11.svg" alt="小红在小李之后push到master" /></p>

<h3>Feature Branch Workflow</h3>

<ul>
<li>适合几个人的小项目。</li>
<li>利用<em>pull request</em>进行code review和交流改进。</li>
</ul>


<p>相比<em>Centralized Workflow</em>，这个工作流没有增加多少内容，只是在merge过程时一定要创建<code>pull request</code>让大家可以有个代码review和交流修改的过程。</p>

<h3>Gitflow</h3>

<p>比较适合多人的大型项目。</p>

<p><img src="http://nvie.com/img/git-model@2x.png" title="git branching model" alt="git branching model" /></p>

<ul>
<li>master</li>
<li>develop</li>
<li>release</li>
<li>feature</li>
<li>bugfix</li>
</ul>


<!-- 一个例子是线上生产稳定的跑着1.2版本（master分支），开发和测试主要活跃在develop分支，产品路线图中计划的下个月的1.3版本的发布是develop的一个release分支。在1.3版本中总共加入了3个feature和5个bugfix，总共由4个人负责代码开发。-->




<!--2个主要分支：master和develop。master分支对应生产环境跑的代码，很像rpm包的`current channel`；develop对应的就是rpm发布的`test channel`，feature和release在完成后都会并入到develop分支。-->


<h3>More Readings</h3>

<ul>
<li><a href="http://paulhammant.com/2014/01/08/googles-vs-facebooks-trunk-based-development/">Google&rsquo;s vs Facebook&rsquo;s Trunk Based Development</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Tips]]></title>
    <link href="http://liuyix.org/blog/2014/bash-tips/"/>
    <updated>2014-09-14T16:59:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/bash-tips</id>
    <content type="html"><![CDATA[<h3>Bash 遇到错误就退出</h3>

<p><a href="http://stackoverflow.com/a/4382179">http://stackoverflow.com/a/4382179</a></p>

<p><code>set -e</code></p>

<blockquote><p>If you put set -e in a script, the script will terminate as soon as any command inside it fails (i.e. as soon as any command returns a nonzero status). This doesn&rsquo;t let you write your own message, but often the failing command&rsquo;s own messages are enough.</p>

<p>The advantage of this approach is that it&rsquo;s automatic: you don&rsquo;t run the risk of forgetting to deal with an error case.</p>

<p>Commands whose status is tested by a conditional (such as if, &amp;&amp; or ||) do not terminate the script (otherwise the conditional would be pointless). An idiom for the occasional command whose failure doesn&rsquo;t matter is command-that-may-fail || true. You can also turn set -e off for a part of the script with set +e.</p></blockquote>

<h2>Bash使用数组</h2>

<h3>快速入门</h3>

<p>(Bash For Loop Array: Iterate Through Array Values)[<a href="http://www.cyberciti.biz/faq/bash-for-loop-array/">http://www.cyberciti.biz/faq/bash-for-loop-array/</a>]</p>

<ul>
<li>用括号指定，空格指定就好</li>
<li>遍历： <code>for i in "${var[@]}"</code></li>
</ul>


<h3>深入</h3>

<p>```</p>

<h1>!/bin/bash</h1>

<h1>array-ops.sh: More fun with arrays.</h1>

<p>array=( zero one two three four five )</p>

<h1>Element 0   1   2    3     4    5</h1>

<p>echo ${array[0]}       #  zero
echo ${array:0}        #  zero</p>

<pre><code>                   #  Parameter expansion of first element,
                   #+ starting at position # 0 (1st character).
</code></pre>

<p>echo ${array:1}        #  ero</p>

<pre><code>                   #  Parameter expansion of first element,
                   #+ starting at position # 1 (2nd character).
</code></pre>

<p>echo &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;</p>

<p>echo ${#array[0]}      #  4</p>

<pre><code>                   #  Length of first element of array.
</code></pre>

<p>echo ${#array}         #  4</p>

<pre><code>                   #  Length of first element of array.
                   #  (Alternate notation)
</code></pre>

<p>echo ${#array[1]}      #  3</p>

<pre><code>                   #  Length of second element of array.
                   #  Arrays in Bash have zero-based indexing.
</code></pre>

<p>echo ${#array[*]}      #  6</p>

<pre><code>                   #  Number of elements in array.
</code></pre>

<p>echo ${#array[@]}      #  6</p>

<pre><code>                   #  Number of elements in array.
</code></pre>

<p>echo &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&rdquo;</p>

<p>array2=( [0]=&ldquo;first element&rdquo; [1]=&ldquo;second element&rdquo; [3]=&ldquo;fourth element&rdquo; )</p>

<h1>^     ^       ^     ^      ^       ^     ^      ^       ^</h1>

<h1>Quoting permits embedding whitespace within individual array elements.</h1>

<p>echo ${array2[0]}      # first element
echo ${array2[1]}      # second element
echo ${array2[2]}      #</p>

<pre><code>                   # Skipped in initialization, and therefore null.
</code></pre>

<p>echo ${array2[3]}      # fourth element
echo ${#array2[0]}     # 13    (length of first element)
echo ${#array2[*]}     # 3     (number of elements in array)</p>

<p>exit
```</p>

<p>(Arrays)[<a href="http://www.tldp.org/LDP/abs/html/arrays.html">http://www.tldp.org/LDP/abs/html/arrays.html</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMP L1 Cache MESI Coherence Protocol Internal]]></title>
    <link href="http://liuyix.org/blog/2014/cache-internal-professional/"/>
    <updated>2014-01-07T15:02:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/cache-internal-professional</id>
    <content type="html"><![CDATA[<h2>Gem5 Simulator Ruby Memory System</h2>

<p>Ruby Memory</p>

<h2>基于Directory的SMP L1 Cache MESI协议的内部实现</h2>

<p><strong>Directory</strong> :
<strong>SMP</strong> :
<strong>L1</strong> :</p>

<p><img src="/images/Diagrama_MESI.gif" alt="/images/Diagrama_MESI.gif" /></p>

<p>而实际上<strong>SMP架构</strong>中的MESI具有多个<em>瞬时状态</em> ,在研究Gem5模拟器中集成的<em>Ruby Memory System Simulator</em>的实现，根据协议实现代码，我得到了以下添加了瞬时状态后的有限状态机图示（ <strong>该图依然为简化后的图，其中省略了自旋状态转换</strong> ，这样看起来更清晰些）</p>

<p><img src="/images/MESI-orig.png" alt="MESI" /></p>

<p>当然这依然不是最终实现的结构，该图并没有考虑目前已经广泛应用在各种处理器上的 <em>Prefetcher</em>
本文之后会介绍这些 <em>State</em> 以及对应的 <em>Event</em> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[并发编程理论与实践]]></title>
    <link href="http://liuyix.org/blog/2014/concurrent-practise-review/"/>
    <updated>2014-01-04T14:42:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/concurrent-practise-review</id>
    <content type="html"><![CDATA[<blockquote><p>本文是<em><a href="http://developer.android.com/training/articles/smp.html">SMP Primer for Android</a></em>的阅读笔记，该篇文章是由<a href="http://weibo.com/2216172320/AoTosDEUo">@何_登成的一条微博</a>推荐的并发编程。</p></blockquote>

<h4>Changelog</h4>

<table>
<thead>
<tr>
<th></th>
<th>Version </th>
<th>  Time </th>
<th> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 0.1 </td>
<td> 2014-01-04 </td>
<td> 笔记要点备忘，依旧施工中&hellip; </td>
</tr>
</tbody>
</table>


<!--more-->


<h2>基本要点</h2>

<ul>
<li>x86的<em>Memory Consistency Model</em> 与 ARM的 <em>Memory Consistency Model</em> 是不同的</li>
<li>ARM的 <em>Memory Consistency Model</em> 更加relax，因此需要更多的控制。</li>
<li>关于 <em>Observer</em> 视角：什么是读一致，什么是写一致</li>
<li>影响一致性的因素： <em>Cacheline</em> ,<em>Compiler reorder</em></li>
<li><em>Memory barrier</em></li>
<li><em>RMW</em> :<em>Read-Modify-Write</em> / <em>CAS</em> : <em>Compare And Set/Swap</em></li>
<li><em>Spinlock</em> 和 <em>Release</em> &amp; <em>Acquire</em></li>
<li><em>Atomic</em> &amp; <em>Non-atomic</em></li>
<li>C++的 <em>volatile</em></li>
<li><em>Java</em> 的 <em>volatile</em></li>
</ul>


<h2>并发问题</h2>

<p>并发问题：真正的并发——SMP环境下同一时刻会有多条指令同时执行，共享变量——局部的和私有的变量不会出现并发问题，并发问题只有在 <strong>共享变量</strong> 上才会出现。因此无论在何种环境下一定要尽力减少 <strong>共享</strong> ，这是避免出现并发一致性问题的最好方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[百度校招-系统研发工程师-笔试题]]></title>
    <link href="http://liuyix.org/blog/2013/baidu-exam-review/"/>
    <updated>2013-10-15T01:36:00+08:00</updated>
    <id>http://liuyix.org/blog/2013/baidu-exam-review</id>
    <content type="html"><![CDATA[<p>几道编程算法题：</p>

<ul>
<li>实现类似wget一样的进度条</li>
<li>100亿个单词，每个单词长度小于30，输出去重后的所有单词。</li>
</ul>


<!--more-->


<h3>实现类似wget进度条</h3>

<blockquote><p>当时没有想出来，回来才搜索之后才知道考察的是对转义符的理解。</p></blockquote>

<p>关于换行，话题看起来看似简单，但实际内容不少。</p>

<p><strong>主流操作系统文本换行的差异</strong></p>

<table>
<thead>
<tr>
<th></th>
<th> OS </th>
<th> 按下回车后插入的控制字符 </th>
<th> 含义 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Windows </td>
<td> <code>\r\n</code> </td>
<td> 0x0D 0x0A <em>CR LF</em> </td>
</tr>
<tr>
<td></td>
<td> Linux </td>
<td> <code>\n</code> </td>
<td> 0x0D <em>LF</em> </td>
</tr>
<tr>
<td></td>
<td> Mac OSX </td>
<td> <code>\r</code> </td>
<td> 0x0D <em>CR</em> </td>
</tr>
</tbody>
</table>


<p>因此你经常会遇到Windows下用notepad看某些Linux编辑的文本，都没有换行。</p>

<p>基本的内容就这么多，如何实现wget的进度条即是在Linux下用<code>\r</code>而不用<code>\n</code>，这样会不断的将新内容输出到同一行，从而达到“刷新”的效果。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>demo.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//类似wget的进度条的实现，实际就是转移符\r的使用，\r的作用是返回至行首而不换行</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">unsigned</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">bar</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;#&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;progress:[%s]%d%%</span><span class="se">\r</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">bar</span><span class="o">+</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span><span class="c1">//一定要fflush，否则不会会因为缓冲无法定时输出。</span>
</span><span class='line'>    <span class="n">usleep</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span><span class="c1">// 睡眠100ms</span>
</span><span class='line'>    <span class="c1">//sleep(1);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>给定100亿个单词，每个单词长度小于30，输出去重后的所有单词序列。</h3>

<p>面试准备不充分，这是trie树的最典型的题目了。
更多的信息可以看July的文章。
<a href="http://blog.csdn.net/v_july_v/article/details/6897097">http://blog.csdn.net/v_july_v/article/details/6897097</a></p>
]]></content>
  </entry>
  
</feed>
