<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Liuyix]]></title>
  <link href="http://liuyix.org/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://liuyix.org/"/>
  <updated>2015-04-06T01:27:35+08:00</updated>
  <id>http://liuyix.org/</id>
  <author>
    <name><![CDATA[liuyix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android 4.3新特性——SElinux简介 ]]></title>
    <link href="http://liuyix.org/blog/2013/android-4-dot-3-selinux/"/>
    <updated>2013-07-28T00:32:00+08:00</updated>
    <id>http://liuyix.org/blog/2013/android-4-dot-3-selinux</id>
    <content type="html"><![CDATA[<p>New Jelly Bean &mdash; Android 4.3于7月底发布，这次整体上变化不是很大，所以还是叫Jelly Bean。不过在底层，Android在安全上实际增强了不少，Android 4.3开始集成SELinux, 系统的安全性(<em>潜力</em>)提高了一个档次。</p>

<p>New Jelly Bean, New JB，Android 4.3指的都是Google新发布的Android 4.3系统，代号依旧是Jelly Bean</p>

<h2>The End of Root?</h2>

<p><strong>Absolutely NO!!</strong></p>

<ol>
<li>SELinux 目前（从长远看也很可能）是 <em>permissive</em> 模式，即不会拒绝而只是记录<em>违规</em>事件；而不是最严格的 <em>enforce</em> 模式——只要违反规则就会denial，因为普通消费者能遇到的应用和情形会非常复杂，如果使用该模式会出现更多的问题，同时也会给用户束缚自由的感觉（如同厂商卖给你手机的同时给你规定好了“你只可以xxxx而不能xxxx”，不管你是不是这样觉得，我反正是这么觉得）。这也就意味着使用漏洞提权的方法获得root权限依旧可行，只要SELinux使用的是<code>permissive</code>模式。</li>
<li>即使SELinux设置为<code>enforce</code>模式，也不会是root的末日。我们还可以通过<em>线刷</em>的方法刷入修改的或者其他的定制ROM方法获取Root权限。这样做的前提是手机厂商不锁bootloader（从而给用户自由刷机的权利）。谷歌的Nexus系列就是不锁bootloader——可以使用<code>fastboot oem unlock</code> 解锁，之后就可以用<code>fastboot</code>随意的修改定制手机ROM。
而三星手机没有强硬的采取严格的手段锁bootloader，可以用Samsung的<em>官方</em>刷机工具Odin<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>刷机，一样可以实现不锁bootloader的效果——随意修改定制手机。其他厂商就不太了解了。</li>
</ol>


<h4>New challenge for Root</h4>

<p>New Jelly Bean给root确实增加一些阻碍，这其中包括：增加了nosuid选项的system分区以及root用户的capabilities的限制。所以两位手机root的大神chainfire和koush在New JB上都采用了新的 <em>daemon</em> 模式。</p>

<!--more-->


<h2>SELinux带来了什么？</h2>

<p>极大的增强了Android系统的安全性潜力，SELinux机制实际效用依赖于<code>selinux policy</code>等SELinux的设定。SELinux的加入为Android进入更高安全性和保密性的团体和企业中提供了很大的便利，Android在企业市场有了更多的想象空间。<br/>
试举一栗子：涉密企业项目的成员移动设备定制化安全服务——可以由Android安全服务公司负责定制ROM，根据项目或者企业需求加入定制化的SELinux策略。好吧，Android移动安全领域的门槛又矮了一截子。</p>

<h2>Android SELinux一窥</h2>

<p>Google写的SELinux Guide（<a href="https://source.android.com/devices/tech/security/se-linux.html">here</a>）对部署和设置SELinux提出了指导性的概括。 <br/>
SELinux模块包含了内核空间和用户空间两部分，配置SELinux需要使用相应的Android内核。</p>

<h3>SELinux 编译和部署</h3>

<ol>
<li><p>下载源代码至<code>&lt;root&gt;/device/manufacturer/device-name/sepolicy</code>：</p>

<ul>
<li>包含SELinux的内核： <a href="https://android.googlesource.com/kernel/common/">https://android.googlesource.com/kernel/common/</a></li>
<li>编译时需要提供的SELinux配置文件: <a href="https://android.googlesource.com/platform/external/sepolicy/">https://android.googlesource.com/platform/external/sepolicy/</a></li>
</ul>
</li>
<li><p>修改BoardConfig.mk</p></li>
</ol>


<p>```bash</p>

<p>BOARD_SEPOLICY_DIRS := \</p>

<pre><code>    &lt;root&gt;/device/manufacturer/device-name/sepolicy
</code></pre>

<p>BOARD_SEPOLICY_UNION := \</p>

<pre><code>    genfs_contexts \ 
    file_contexts \ 
    sepolicy.te 
</code></pre>

<p>```</p>

<ol>
<li>重新编译内核</li>
</ol>


<h3>SELinux定制流程(via Google)</h3>

<blockquote><ul>
<li><p>SELinux uses a whitelist approach, meaning it grants special privileges based upon role. Because the default policy provided by Android is so permissive, OEMs have great leeway in strengthening it. Here is how we recommend proceeding:</p></li>
<li><p>Use the latest Android kernel.</p></li>
<li>Adopt the principle of least privilege.</li>
<li>Address only your own additions to Android. The default policy works with the Android Open Source Project codebase automatically.</li>
<li>Compartmentalize software components into modules that conduct singular tasks.</li>
<li>Create SELinux policies that isolate those tasks from unrelated functions.</li>
<li>Put those policies in *.te files (the extension for SELinux policy source files) within the <root>/device/manufacturer/device-name/sepolicy directory.</li>
<li>Release your SELinux implementation in permissive mode first.</li>
<li>Analyze results and refine policy settings.</li>
</ul>
</blockquote>

<h2>More about SELinux for Android</h2>

<p>本节大部分信息都是从<a href="http://selinuxproject.org/page/SEAndroid">SEAndroid Wiki</a>上获取.</p>

<p>Android 4.3 采用的是SEAndroid<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，但是做了相当的精简和改变，其中没有以下部分<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>：</p>

<ul>
<li>SELinux管理API以及附带的示例程序 (The new device admin APIs for managing the SELinux functionality and the SEAdmin sample device admin app for using those APIs.)</li>
<li>除了 <code>a restricted form of its sefinfo support for labeling apps</code> 以外，没有任何MAC机制的中间件。</li>
<li>没有 <code>auditd</code> ,<em>也就是说Android 4.3并没有一个收集SELinux审计log的daemon程序</em> （The audit daemon (auditd) for collecting SELinux audit denials and writing them to /data/misc/audit/audit.log. )</li>
<li>采用和SEAndroid不同的策略，<em>fully permissive and unconfined</em> (Our sample policy configuration (Android 4.3 and AOSP master have diverged from our policy, replacing it with a policy that is fully permissive and unconfined).
)</li>
<li>没有重载SELinux策略上的优化，重载策略还需要重启daemon(Some improvements to how policy reloading is handled, particularly avoiding the need to restart daemons.)</li>
<li>对于多用户目录没有合适的安全标签（<code>security label</code>)</li>
</ul>


<p>所以如果想使用<em>完整版</em>的SEAndroid需要去下载使用独立的<a href="https://bitbucket.org/seandroid">SEAndroid</a></p>

<hr />

<p>未完待续&hellip;</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>有关Odin的XDA论坛地址：<a href="http://forum.xda-developers.com/showthread.php?t=2189539">http://forum.xda-developers.com/showthread.php?t=2189539</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>SELinux项目地址：<a href="https://bitbucket.org/seandroid">https://bitbucket.org/seandroid</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://selinuxproject.org/page/SEAndroid#Merge_Status">http://selinuxproject.org/page/SEAndroid#Merge_Status</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android平台上的JNI技术介绍]]></title>
    <link href="http://liuyix.org/blog/2013/android-ndk-and-jni-introduction/"/>
    <updated>2013-07-15T06:00:00+08:00</updated>
    <id>http://liuyix.org/blog/2013/android-ndk-and-jni-introduction</id>
    <content type="html"><![CDATA[<h2>NDK简介</h2>

<p>Android是由Google领导开发的操作系统，Android依靠其开放性，迅速普及，成为目前最流行的智能手机操作系统。</p>

<p><img src="/images/android-system-architecture.jpg" alt="/images/android-system-architecture.jpg" /></p>

<center>图0-1 Android系统架构图</center>


<p>图0-1是Android系统架构图。</p>

<!--more-->


<p>大多数程序位于最上层的Java Application层。Android通过把系统划分为几个层次从而使得开发者可以使用平台无关的Java语言进行Android应用开发，不必关心程序实际的硬件环境。 Google不仅为开发者提供了SDK开发套件，为了能让开发者使用C/C++编写的本地化的共享库，利用编译后的共享库更高效的完成计算密集型的操作来提高应用的性能，或者移植重用已有的C/C++组件，提高开发效率，Android 1.5之后，又推出了NDK（Native Development Kit）。有了NDK，开发者能够在Android平台上使用JNI(Java Native Interface)技术，实现应用程序中调用本地二进制共享库。 由于Android系统不同于以往的JNI使用环境而是在嵌入式硬件环境下，Android NDK提供了一套交叉编译工具链,和构建程序的工具方便开发者在桌面环境下编译目标平台的二进制共享库。 目前NDK提供了对ARMv5TE,ARMv7-A,x86和MIPS指令集平台的支持，同时在本地接口的支持上，目前以下本地接口支持</p>

<ul>
<li>libc</li>
<li>libm</li>
<li>libz</li>
<li>liblog</li>
<li>OpenGL ES 1.1 and OpenGL ES 2.0 (3D graphics libraries) headers</li>
<li>libjnigraphics (Pixel buffer access) header (Android 2.2 以上可用).</li>
<li>C++头文件的一个子集</li>
<li>Android native应用API接口</li>
<li>JNI头文件接口</li>
</ul>


<p>由上面的介绍，我们可以知道，实际上NDK开发是以JNI技术为基础的，因此要求开发者必须要掌握基本的JNI技术，这样才能进行有效的NDK开发。</p>

<h2>JNI技术简介</h2>

<p>JNI（Java Native Interface）是Java SDK 1.1时正式推出的，目的是为不同JVM实现间提供一个标准接口，从而使Java应用可以使用本地二进制共享库，扩充了原有JVM的能力，同时Java程序仍然无需再次编译就可以运行在其他平台上，即保持了平台独立性又能使用平台相关的本地共享库提升性能。在Java开发中的位置如下图所示。JNI作为连接平台独立的Java层(以下简称Java层)与与平台相关的本地环境(以下简称Native层)之间的桥梁。</p>

<p><img src="/images/role-of-jni-intro.gif" alt="/images/role-of-jni-intro.gif" /></p>

<p>图1-1 JNI在Java开发中的位置</p>

<p>实际上在Android内部就大量的使用了JNI技术，尤其是在Libraries层和Framework层。</p>

<h2>何时使用Android NDK</h2>

<p>Google在其文档提到了NDK不能让大多数应用获益,其增加的复杂度远大于获得的性能的代价。Google建议当需要做大量的cpu密集同时少量存储操作或者重用C/C++代码时可以考虑使用NDK。 本文的余下部分将具体介绍Android平台下通过NDK的支持的如何进行JNI的开发。</p>

<h2>Hello,NDK</h2>

<p>本节通过一个简单的例子，介绍NDK开发流程以及JNI的基本使用。 笔者假定你已经下载了NDK，且有Android SDK开发的经验。 在NDK开发包中就有若干的NDK示例。其中 <code>hello-jni</code> 是一个简单的实例。该实例从native层传递字符串到java层，并显示在界面上。（你可以在Eclipse里选择 <strong>新建Anroid项目</strong> ,之后选择 “Create project from existing source”，并定位到NDK目录中的 <strong>Sample/hello-jni</strong> ,这样就可以将示例代码导入到Eclipse中。） HelloJni的Java代码如下：</p>

<p>```java</p>

<pre><code>package com.example.hellojni;
import android.app.Activity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.os.Bundle;
import android.view.View.OnClickListener;

public class HelloJni extends Activity
{
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        Button btn = (Button)findViewById(R.id.btn);
        final TextView txtv = (TextView)findViewById(R.id.txtv);
        btn.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                txtv.setText(stringFromJNI());//调用native函数

            }
        });
    }

    /* A native method that is implemented by the
     * 'hello-jni' native library, which is packaged
     * with this application.
     * 声明含有native关键词的函数，就可以在类中使用了。
     */
    public native String  stringFromJNI();

    /* 
     * 该函数并没有在共享库中实现，但是仍然可以声明。
     * 没有实现的native函数也可以在类中声明，native方法仅在首次调用时才开始搜索。
     * 若没有找到该方法，会抛出java.lang.UnsatisfiedLinkError异常
     */
    public native String  unimplementedStringFromJNI();

    /* this is used to load the 'hello-jni' library on application
     * startup. The library has already been unpacked into
     * /data/data/com.example.HelloJni/lib/libhello-jni.so at
     * installation time by the package manager.
     * 使用静态方式再创建类时就载入共享库，该共享库（后面会介绍）在程序安装后
     * 位于/data/data/com.example.HelloJni/lib/libhello-jni.so
     */
    static {
        System.loadLibrary("hello-jni");
    }
}
</code></pre>

<p>```</p>

<p>Java代码中调用native函数很简单。大致分为以下几步：</p>

<ul>
<li>调用 <code>System.loadLibrary</code> 方法载入共享库</li>
<li>声明native方法</li>
<li>调用native方法</li>
</ul>


<p>JNI的使用的一个关键点是 1) 如何找到共享库 2)如何将Java代码中的声明的native方法和实际的C/C++共享库中的代码相关联，即JNI函数注册。 第一个问题可以交给NDK构建工具 <code>ndk-build</code> 解决:通常是将编译好的so共享库放在 <code>libs/armeabi/libXXX.so</code> 之后会有更详细的介绍。第二个问题可以将在第二节中系统讲述，现在我们只简单的说一下如何做。</p>

<h3>利用javah生成目标头文件</h3>

<p>简易实用的方法是通过利用Java提供的 <code>javah</code> 工具生成和声明的native函数对应的头文件。具体操作是如下：</p>

<ol>
<li> 命令行进入到你的项目目录中</li>
<li> 确认你的android项目的java代码已经编译，如果存在 <code>bin/</code> 目录，应该是编译好的。</li>
<li> 确认你的android项目目录中存在 <code>jni</code> 子目录，如果没有则创建一个（我们现在使用的自带的实例代码，因此可以）。</li>
<li> 在项目根目录下执行命令： <code>javah -jni com.example.hellojni.HelloJNI -classpath bin/classes -o jni/hello-jni.h</code> <strong>确认javah所在路径已经在的$PATH路径下</strong></li>
<li> 若上一命令执行成功，则会在 <code>jni</code> 目录下生成一个名为 <code>my_jni_header.h</code> 的头文件。</li>
</ol>


<h3>编写C/C++共享库代码</h3>

<p>上一步骤我们得到了与Java源文件对应的头文件，因此只要编写 <code>my_jni_header.c</code> ，实现头文件里面的声明的源代码。生成的内容如下：</p>

<p>```c++</p>

<pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;jni.h&gt;
/* Header for class com_example_hellojni_HelloJni */

#ifndef _Included_com_example_hellojni_HelloJni
#define _Included_com_example_hellojni_HelloJni
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_hellojni_HelloJni
 * Method:    stringFromJNI
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_hellojni_HelloJni_stringFromJNI
  (JNIEnv *, jobject);

/*
 * Class:     com_example_hellojni_HelloJni
 * Method:    unimplementedStringFromJNI
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_hellojni_HelloJni_unimplementedStringFromJNI
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
</code></pre>

<p>```</p>

<p>可以看到生成的头文件中的函数和示例项目 <code>hello-jni</code> 中的 <code>hello-jni.c</code> 正好对应。据此也可知我们生成的头文件是正确的。 <code>hello-jni.c</code> 源代码如下：</p>

<p>```c++</p>

<pre><code>#include &lt;string.h&gt;
#include &lt;jni.h&gt;
#include &lt;stdio.h&gt;

/* This is a trivial JNI example where we use a native method
 * to return a new VM String. See the corresponding Java source
 * file located at:
 *
 *   apps/samples/hello-jni/project/src/com/example/HelloJni/HelloJni.java
 */
jstring
Java_com_example_hellojni_HelloJni_stringFromJNI( JNIEnv* env,
                                                  jobject thiz )
{
    char msg[100];
    sprintf(msg,"Hello from JNI.");
    return (*env)-&gt;NewStringUTF(env, msg);
}
</code></pre>

<p>```</p>

<h3>使用NDK提供的工具编译生成共享库</h3>

<p>经过以上两步，我们已经得到了C/C++共享库的源代码，现在需要使用交叉编译工具将其编译成目标机器上的二进制共享库。NDK工具提供了一个简单的构建系统，开发者之需要编写 <code>Android.mk</code> ，之后在项目根目录下执行命令 <code>ndk-build</code> 就可以完成交叉编译过程。</p>

<p>```</p>

<pre><code>LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)

LOCAL_MODULE    := hello-jni
LOCAL_SRC_FILES := hello-jni2.c

include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>```</p>

<p><code>Android.mk</code> 可以看作是小型的makefile，关于 <code>Android.mk</code> 的更多细节，限于篇幅，这里不做详细介绍请参考NDK自带文档，里面有完整的介绍。 输出的信息类似下面：</p>

<p>```</p>

<pre><code>Gdbserver      : [arm-linux-androideabi-4.4.3] libs/armeabi/gdbserver
Gdbsetup       : libs/armeabi/gdb.setup
Compile thumb  : hello-jni &lt;= hello-jni.c
SharedLibrary  : libhello-jni.so
Install        : libhello-jni.so =&gt; libs/armeabi/libhello-jni.so
</code></pre>

<p>```</p>

<p>上面的信息告诉我们生成好的so文件路径为 <code>libs/armeabi/libhello-jni.so</code> 。至此一个简单的NDK程序的已经制作完成。 总结一下大致过程是：</p>

<ul>
<li>编写好Java源文件，使用静态代码段载入共享库，并声明native函数。之后编译android项目</li>
<li>使用 <code>javah</code> 工具生成头文件</li>
<li>根据头文件编写native函数</li>
<li>利用 <code>ndk-build</code> 完成共享库的编译</li>
</ul>


<h2>native函数的动态注册方法</h2>

<p>上一节我们通过一个简单的实例，对NDK开发有了一个感性的认识。但是你也许会发现Java层上声明的native函数与native上面的实现之间的关联是通过javah生成头文件完成的，这个方法显得很笨拙。 实际上这种静态注册的方法是通过函数名（ <code>Java_com_example_hellojni_HelloJni_stringFromJNI</code> ）来建立联系。这种做法有诸多弊端：</p>

<ul>
<li>名字很长，没有可读性。</li>
<li>每个声明了native函数的类都要生成一个对应的头文件，对于真实的应用程序，类文件很多时不现实。</li>
<li>每次载入都需要查询native函数，效率低。</li>
</ul>


<p>Android内部实现上，在使用JNI时很显然并没有这样做，它采用了更加规范的 <code>动态注册</code> 的方法进行两个层次上的关联。</p>

<h3>动态注册版Hello-Jni</h3>

<p>以下代码是上面的 <code>hell-jni.c</code> 的动态注册版，代码中使用的是自定义的native函数名称。</p>

<p>```c++</p>

<pre><code>#include &lt;string.h&gt;
#include &lt;jni.h&gt;
#include &lt;stdio.h&gt;

jstring getHelloString();

static JNINativeMethod gMethods[] = {
    {
    "stringFromJNI",
    "()Ljava/lang/String;",
    (void *)getHelloString
    }
};

static int nMethods = 1;
static JNIEnv *env = NULL;

jstring getHelloString()
{
    char msg[100];
    sprintf(msg,"Hello from JNI.");
    return (*env)-&gt;NewStringUTF(env, msg);
}

jint JNI_OnLoad(JavaVM *vm,void *reserved){

    jint result = -1;
    jclass clz = NULL;
    if ((*vm)-&gt;GetEnv(vm,(void**) &amp;env, JNI_VERSION_1_4) != JNI_OK){
        return -1;
    }
    clz = (*env)-&gt;FindClass(env,"com/example/hellojni/HelloJni");
    if((*env)-&gt;RegisterNatives(env,clz,gMethods,nMethods) &lt; 0) {
        return -1;
    }
    return JNI_VERSION_1_4;//根据JNI规范，JNI_OnLoad必须返回版本号常量否则出错。
}
</code></pre>

<p>```</p>

<p>根据Java的官方文档<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，当VM载入共享库时，会寻找 <code>jint JNI_OnLoad(JavaVM *vm, void *reserved)</code> 函数，如果存在则再载入共享库之后调用该函数。因此我们可以在该函数中完成native函数的注册工作。 <code>JNI_OnLoad</code> 函数的参数有两个，最主要就是 <code>JavaVM</code> 结构。 <code>JavaVM</code> 是存储VM信息的数据结构。更多信息将在后面讲到，这里我们只需要知道，通过JavaVM指针我们可以得到另一个JNI核心结构—— <code>JNIEnv</code> , <code>JNIEnv</code> 代表了整个JNI环境的数据结构，实际是一个函数表,其中存储了JNI的各种相关操作的函数指针，后文会详细介绍，在这里我们只需要知道在JNIEnv结构有以下的方法，通过调用就可以实现动态注册。</p>

<ul>
<li><code>jclass FindClass(JNIEnv *env, const char *name)</code> 传入JNIEnv指针和类名称返回代表这个类的结构<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li>
<li><code>jint RegisterNatives(JNIEnv *env, jclass clazz,const JNINativeMethod *methods, jint nMethods)</code> 注册native函数的函数<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
</ul>


<h3>JNINativeMethod结构</h3>

<p><code>``
</code>RegisterNatives<code>用来注册一组native函数，其中使用到了</code>JNINativeMethod` 结构，具体定义如下3：</p>

<pre><code>typedef struct { 

    char *name; //Java代码中声明的native函数的名称

    char *signature; //对应Java代码层native函数的签名，下面会介绍

    void *fnPtr; //共享库中函数指针

} JNINativeMethod; 
</code></pre>

<p>```</p>

<p>这里就涉及到了 <strong>函数签名</strong></p>

<h4>函数签名</h4>

<p>Java允许函数重载，因此在注册时就要具体区分出来，否则会出现混乱，因而这里就要使用一种方法将每个Java中的方法标上唯一的标记。这种方法就是 <strong>函数签名</strong> 。函数签名应该属于JVM内部的规范，不具有可读性。规定<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>如下：</p>

<table>
<thead>
<tr>
<th></th>
<th>类型标识 </th>
<th> Java类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Z </td>
<td> boolean</td>
</tr>
<tr>
<td></td>
<td> B </td>
<td> byte </td>
</tr>
<tr>
<td></td>
<td> C </td>
<td> char </td>
</tr>
<tr>
<td></td>
<td> S </td>
<td> short</td>
</tr>
<tr>
<td></td>
<td> I </td>
<td> int </td>
</tr>
<tr>
<td></td>
<td> J </td>
<td> long </td>
</tr>
<tr>
<td></td>
<td> F </td>
<td> float </td>
</tr>
<tr>
<td></td>
<td> D </td>
<td> double </td>
</tr>
<tr>
<td></td>
<td> L/java/lang/String; </td>
<td> String </td>
</tr>
<tr>
<td></td>
<td> [I </td>
<td> int[] </td>
</tr>
<tr>
<td></td>
<td> [L/java/lang/object; </td>
<td> Object[] </td>
</tr>
<tr>
<td></td>
<td> V </td>
<td> void </td>
</tr>
</tbody>
</table>


<p> 表1 类型标示对应表</p>

<p>每个函数签名大致格式 <code>(&lt;参数签名&gt;)返回值类型签名</code> 引用类型的参数签名形式为 <code>L&lt;包名&gt;</code></p>

<table>
<thead>
<tr>
<th></th>
<th> Java函数函数签名 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> String f()</td>
</tr>
<tr>
<td></td>
<td> ()L/java/lang/String;</td>
</tr>
<tr>
<td></td>
<td> void f(String s,AClass cls,long l)</td>
</tr>
<tr>
<td></td>
<td> (L/java/lang/String;L/com/example/AClass;J)V</td>
</tr>
<tr>
<td></td>
<td> String f(byte[]) </td>
</tr>
<tr>
<td></td>
<td> ([B)V</td>
</tr>
</tbody>
</table>


<p>表2 一些签名示例 函数看起来很难懂，我们可以利用 <code>javap</code> 工具查看类中的函数签名那个信息，具体用法：</p>

<ol>
<li> 命令行转到 <code>$PROJECT/bin/classes</code> 下（$PROJECT代表Android程序项目根目录，并假定java文件已经编译好，存在bin目录）</li>
<li> 执行命令 <code>javap -s com.example.helljni.HelloJni</code> 其中 <code>com.example.hellojni.HelloJni</code> 是类的完整名称</li>
</ol>


<h3>小结</h3>

<p>这一节中，通过动态注册版的hello-jni代码示例，简要介绍如何在JNI中实现更灵活的动态注册方法关联Java层中native函数和Native层中的实现函数。JNI规范中规定VM在载入共享库之后，要调用 <code>JNI_OnLoad</code> 函数，一般可以在共享库中实现该方法并完成动态注册。 初步接触了 <code>JavaVM</code> 结构和 <code>JNIEnv</code> 结构，并了解了 <code>JNIEnv</code> 的两个“函数成员” <code>FindClass</code> 和 <code>registerNatives</code> 。之后还看到了JNI中保存关联信息的 <code>JNINativeMethod</code> 结构以及了解了Java的 <strong>函数签名</strong> 。</p>

<h2>两个世界的数据互换</h2>

<p>Java层和Native层之间如同两个说着不同语言的国家一样，如果要互相交流就必须要懂得对方的语言。在Native层中是如何表示Java层的数据类型呢？</p>

<h3>基本数据类型和引用数据类型</h3>

<table>
<thead>
<tr>
<th></th>
<th>Java数据类型 </th>
<th> Native层数据类型 </th>
<th> 符号属性(unsigned/signed) </th>
<th> 长度(bit) </th>
<th> </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> boolean </td>
<td> jboolean </td>
<td> unsigned </td>
<td> 8 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> byte </td>
<td> jbyte </td>
<td> unsigned </td>
<td> 8</td>
<td></td>
</tr>
<tr>
<td></td>
<td> char </td>
<td> jchar </td>
<td> unsigned </td>
<td> 16</td>
<td></td>
</tr>
<tr>
<td></td>
<td> short </td>
<td> jshort </td>
<td> signed </td>
<td> 16</td>
<td></td>
</tr>
<tr>
<td></td>
<td> int </td>
<td> jint </td>
<td> signed </td>
<td> 32 </td>
<td></td>
</tr>
<tr>
<td></td>
<td> long </td>
<td> jlong </td>
<td> signed </td>
<td> 64</td>
<td></td>
</tr>
<tr>
<td></td>
<td> float </td>
<td> jfloat </td>
<td> signed </td>
<td> 32</td>
<td></td>
</tr>
<tr>
<td></td>
<td> double </td>
<td> jdouble </td>
<td> signed </td>
<td> 64</td>
<td></td>
</tr>
</tbody>
</table>


<p> 表3 基本数据类型转换表</p>

<table>
<thead>
<tr>
<th></th>
<th> Java引用类型 </th>
<th> Native类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 所有object </td>
<td> jobject</td>
</tr>
<tr>
<td></td>
<td> java.lang.Class </td>
<td> jclass</td>
</tr>
<tr>
<td></td>
<td> java.lang.String </td>
<td> jstring</td>
</tr>
<tr>
<td></td>
<td> Object[] </td>
<td> jobjectArray</td>
</tr>
<tr>
<td></td>
<td> boolean[] </td>
<td> jbooleanArray</td>
</tr>
<tr>
<td></td>
<td> byte[] </td>
<td> jbyteArray</td>
</tr>
<tr>
<td></td>
<td> char[] </td>
<td> jcharArray</td>
</tr>
<tr>
<td></td>
<td> short[] </td>
<td> jshortArray</td>
</tr>
<tr>
<td></td>
<td> int[] </td>
<td> jintArray</td>
</tr>
<tr>
<td></td>
<td> long[] </td>
<td> jlongArray</td>
</tr>
<tr>
<td></td>
<td> float[] </td>
<td> jfloatArray</td>
</tr>
<tr>
<td></td>
<td> double[] </td>
<td> jdoubleArray</td>
</tr>
<tr>
<td></td>
<td> java.lang.Throwable </td>
<td> jthrowable</td>
</tr>
</tbody>
</table>


<p> 表4 引用数据类型转换表 <br/>
 Native层中将除String以外的类都作为 <code>jobject</code> 处理，对于数组类型，只有基本数据类型的数组是单独表示，其他类型的都以 <code>jobjectArray</code> 类型存储。</p>

<h3>JavaVM</h3>

<p>JavaVM指针指向了一个代表整个VM的实例，同时对所有native线程都有效。主要有以下几个接口可以使用<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>：</p>

<ul>
<li><code>DestroyJavaVM</code> 卸载整个VM实例</li>
<li><code>AttachCurrentThread</code> 将当前的native线程attach到VM实例中，当线程加入到VM线程后，该线程就可以调用诸如访问Java对象、调用Java方法等JNI函数</li>
<li><code>DetachCurrentThread</code> 与 <code>AttachCurrentThread</code> 相反</li>
<li><code>GetEnv</code> 既可以用来检查当前线程是否已经attach到VM实例，还可以得到当前线程的JNIEnv结构。</li>
</ul>


<h3>JNIEnv</h3>

<p>JNIEnv接口包含了JNI的主要功能的函数接口，注意JNIEnv是与线程相关的结构，JNIEnv接口实际是指向内部的一个函数集合，要在Native层操纵某个具体的类，或者调用方法，则需要 <code>JNIEnv</code> 。在native函数的动态注册方法这一节就使用 <code>JNIEnv</code> 的函数进行了native函数的注册。 <code>JNIEnv</code> 是指向一个函数表的指针的指针。 其具体定义如下<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>```c++</p>

<pre><code>typedef const struct JNINativeInterface *JNIEnv; 
const struct JNINativeInterface ... = {

    NULL,
    NULL,
    NULL,
    NULL,
    GetVersion,

    DefineClass,
    FindClass,

    FromReflectedMethod,
    FromReflectedField,
    ToReflectedMethod,

    GetSuperclass,
    IsAssignableFrom,

    ToReflectedField,
    ....//还有很多，这里略去
};
</code></pre>

<p>```</p>

<p>下图是 <code>JNIEnv</code> 的一个简单图示<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p><img src="/images/jnienv.gif" alt="/images/jnienv.gif" /></p>

<p>JNIEnv能提供的功能非常多，大体可以分为以下几类5：</p>

<ul>
<li>取得JavaVM实例</li>
<li>Java对象实例的操作

<ul>
<li>成员访问</li>
<li>方法调用</li>
</ul>
</li>
<li>静态成员的访问</li>
<li>String操作</li>
<li>Object操作</li>
<li>Array操作</li>
<li>Native方法的注册，前文介绍过。</li>
<li>Global Reference &amp; Local Reference</li>
<li>提供VM版本信息</li>
<li>JNI的Exception</li>
<li>对Java反射的支持</li>
</ul>


<p>限于篇幅，在此无法一一讲解用法。仅说明较常用的几个。更多详细信息请参考Sun出版的JNI开发者指南（<a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/">地址</a>）</p>

<h4>通过JNIEnv在Native层对Java对象进行访问和调用</h4>

<p>通过JNIEnv提供的以下方法就可以调用对象的方法</p>

<p>```c++</p>

<pre><code>//调用对象方法的函数原型
NativeType Call&lt;type&gt;Method(JNIEnv *env, jobject obj,jmethodID methodID, ...);
NativeType Call&lt;type&gt;MethodA(JNIEnv *env, jobject obj,jmethodID methodID, jvalue *args);
NativeType Call&lt;type&gt;MethodV(JNIEnv *env, jobject obj,jmethodID methodID, va_list args);
//对对象成员操作的函数原型
NativeType Get&lt;type&gt;Field(JNIEnv *env, jobject obj,jfieldID fieldID);
void Set&lt;type&gt;Field(JNIEnv *env, jobject obj, jfieldID fieldID,NativeType value);
//取得methodID,fieldId的函数原型
jmethodID GetMethodID(JNIEnv *env, jclass clazz,const char *name, const char *sig);
jfieldID GetFieldID(JNIEnv *env, jclass clazz,const char *name, const char *sig);
</code></pre>

<p>```</p>

<p>前三个函数为一组调用对象方法的函数，区别仅在于传递参数的方式不同。其中 <code>NativeType</code> 表示Java方法返回值对应的Native类型，具体转换见表3,表4。 <code>&lt;type&gt;</code> 是 <code>Void</code> / <code>Boolean</code> / <code>Int</code> / <code>Long</code> / <code>Object</code> 等Java基本数据类型。调用这一组函数时，既需要传递对象的信息，还要传递方法的标识以及Java类中的方法的参数。 <code>jobject</code> 变量既可以通过在Native层中调用 <code>CallObjectMethod</code> 得到，也可以通过后面提到的创建对象实例得到。 <code>methodId</code> 则可以通过 <code>GetMethodID</code> 取得。 <code>jclass</code> 参数可以由前文提到的 <code>env-&gt;FindClass</code> 函数取得。 类似地，还有 <code>CallStatic&lt;type&gt;Method</code> 、 <code>GetStatic&lt;type&gt;Field</code> 、 <code>SetStatic&lt;type&gt;Field</code> 在此不再赘述。</p>

<h3>jstring</h3>

<p>由于String特别常用，且存在比较复杂的编码问题，JNI特意将String类作为一个独立的Native层中的数据类型jstring处理。同其他Object操作类似，jstring也是通过 <code>JNIEnv</code> 来管理的。主要的操作函数有：</p>

<p>```c++</p>

<pre><code>jstring NewString(JNIEnv *env, const jchar *unicodeChars,jsize len);
void ReleaseStringChars(JNIEnv *env, jstring string,const jchar *chars);
const jchar * GetStringChars(JNIEnv *env, jstring string,jboolean *isCopy);
jsize GetStringLength(JNIEnv *env, jstring string);

jstring NewStringUTF(JNIEnv *env, const char *bytes);
void ReleaseStringUTFChars(JNIEnv *env, jstring string,const char *utf);
const char * GetStringUTFChars(JNIEnv *env, jstring string,jboolean *isCopy);
jsize GetStringUTFLength(JNIEnv *env, jstring string);
</code></pre>

<p>```</p>

<p>函数的功能可以从名称大致了解到，其中 <code>New</code> 开头的都是将JNI中将String按照编码分为两种，一种是Unicode编码（UTF-16），一种是UTF-8编码 需要注意的是Native层中并没有垃圾自动回收机制，因此申请字符串资源，用完之后要进行释放操作，否则会引起内存泄露。 使用过程中还要注意：Unicode字符串不是“0结尾”的，因此不要依赖 <code>\u0000</code> 进行字符串的操作。 常见的错误还包括调用 <code>NewStringUTF</code> 传入的参数 <code>bytes</code> 必须是 <code>Modified UTF-8</code> 格式的，否则会出现乱码。<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup></p>

<h3>jarray</h3>

<p>Native层可以通过操作jarray数据来处理Java层的数组类型。JNI中将基本类型Java数组和引用类型数组分开处理。 下面是几个Java数组的例子。</p>

<p>```c++</p>

<pre><code>int[] iarr; //基本类型数组
float[] farr;//基本类型数组
Object[] oarr;//引用类型数组，数组元素是Object
int[][] arr2;//引用类型数组，数组元素是 int[]
</code></pre>

<p>```</p>

<h3>基本类型数组的操作</h3>

<p>下表是基本类型数组操作的函数小结</p>

<table>
<thead>
<tr>
<th></th>
<th> JNI函数描述 </th>
<th>    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Get<Type>ArrayRegion </td>
<td> 将基本类型数组的数据复制到预先申请好的C数组中或者反方向操作操作</td>
</tr>
<tr>
<td></td>
<td> Set<Type>ArrayRegion </td>
<td>   </td>
</tr>
<tr>
<td></td>
<td> Get<Type>ArrayElements </td>
<td> 获得/释放指向基本类型数组的数据的指针</td>
</tr>
<tr>
<td></td>
<td> Release<Type>ArrayElements </td>
<td>   </td>
</tr>
<tr>
<td></td>
<td> GetArrayLength </td>
<td> 返回数组的长度</td>
</tr>
<tr>
<td></td>
<td> New<Type>Array </td>
<td> 新建一个指定长度的数组</td>
</tr>
<tr>
<td></td>
<td> GetPrimitiveArrayCritical </td>
<td> 获得/释放指向基本类型数据的指针</td>
</tr>
<tr>
<td></td>
<td> ReleasePrimitiveArrayCritical </td>
<td>   </td>
</tr>
</tbody>
</table>


<p>表5 基本数据类型数组的操作函数</p>

<h3>引用类型数组的操作</h3>

<p>下面以一个简单的代码片段作为说明<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。假设某段Java代码中声明了以下的native函数</p>

<pre><code>native int[][] get2DArray(int size);//返回 int[size][size]大小的二维数组
</code></pre>

<p>Native层可以用以下代码实现</p>

<p>```c++</p>

<pre><code>jobjectArray get2DArray(jint size){
     jobjectArray result;
     int i;
     jclass intArrCls = (*env)-&gt;FindClass(env, "[I");
     if (intArrCls == NULL) {
         return NULL; /* exception thrown */
     }
     result = (*env)-&gt;NewObjectArray(env, size, intArrCls,
                                     NULL);
     if (result == NULL) {
         return NULL; /* out of memory error thrown 可能遇到空间不足*/
     }
     for (i = 0; i &lt; size; i++) {
         jint tmp[256];  /* make sure it is large enough! */
         int j;
         jintArray iarr = (*env)-&gt;NewIntArray(env, size);
         if (iarr == NULL) {
             return NULL; /* out of memory error thrown */
         }
         for (j = 0; j &lt; size; j++) {
             tmp[j] = i + j;
         }
         (*env)-&gt;SetIntArrayRegion(env, iarr, 0, size, tmp);
         (*env)-&gt;SetObjectArrayElement(env, result, i, iarr);
         (*env)-&gt;DeleteLocalRef(env, iarr);
     }
     return result;
}
</code></pre>

<p>```</p>

<p>上述代码展示了 <code>NewObjectArray</code> 、 <code>NewIntArray</code> 、 <code>SetObjectArrayElement</code> 、 <code>SetIntArrayRegion</code> 等函数的用法，代码可读性很高，这里不做进一步解释。</p>

<h2>垃圾回收管理</h2>

<p>Java作为高级语言，具有垃圾自动回收管理机制，内存管理相对轻松。而C/C++则没有这样的机制，因此在Native层对象实例可能被垃圾回收。这里就涉及到了JNI的对象引用的管理。 JNI支持三种引用类型—— <code>LocalReference</code> /  <code>GlobalReference</code> / <code>WeakGlobalReference</code> ，每一种引用类型的生命周期是不同的。 大多数JNI函数使用的是 <strong>LocalReference</strong> ,即在函数中调用的"New"操作返回的都是对象的 <code>LocalReference</code> 。 <code>LocalReference</code> 只在函数执行代码范围内有效，只要JNI函数一返回，引用就会被释放。相对地， <code>GlobalReference</code> 可以在多个函数之间共享，直到开发者自己调用释放函数才会被垃圾回收。另一方面 <code>WeakGlobalReference</code> 则具有 <strong>引用缓存</strong> 功能——一方面它可以像 <code>GlobalReference</code> 一样跨函数共享引用，另一方面它不会阻碍引用的垃圾回收过程。但JNI文档中建议开发者使用 <code>GlobalReference</code> 和 <code>LocalReference</code> 替代 <code>WeakGlobalReference</code> ,因为该引用随时都可能会被垃圾回收，即使是在调用了 <code>IsSameObject</code> 判定引用有效之后仍然可能会失效<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>。 有关引用的操作有</p>

<p>```c++</p>

<pre><code>//GlobalReference
jobject NewGlobalRef(JNIEnv *env, jobject obj);
void DeleteGlobalRef(JNIEnv *env, jobject globalRef);
//LocalReference
void DeleteLocalRef(JNIEnv *env, jobject localRef);
jobject NewLocalRef(JNIEnv *env, jobject ref);
//WeakLocalReference
jweak NewWeakGlobalRef(JNIEnv *env, jobject obj);
void DeleteWeakGlobalRef(JNIEnv *env, jweak obj);
//通用的引用操作
jobject AllocObject(JNIEnv *env, jclass clazz);
jobject NewObject(JNIEnv *env, jclass clazz,jmethodID methodID, ...);
jclass GetObjectClass(JNIEnv *env, jobject obj);
jobjectRefType GetObjectRefType(JNIEnv* env, jobject obj);
jboolean IsSameObject(JNIEnv *env, jobject ref1,jobject ref2);
</code></pre>

<p>```</p>

<p>更多信息请参考官方文档（<a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#global_local">地址</a>)和JNI开发者指南(<a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/refs.html">地址</a>)</p>

<h2>总结</h2>

<p>本文大致介绍了Android NDK的相关技术以及NDK的基础——JNI的使用，其中简述了NDK的开发流程、函数注册的两种方式、JNI技术的基本内容，其中包括了Java层和Native层之间的数据转换和互操作方法。不难发现，JNI技术扩展了原有Java技术的能力。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Java Native Interface Specification <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/invocation.html">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/invocation.html</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp16027">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp16027</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp17734">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp17734</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>深入理解Android：卷I pp28-29 <a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Java Native Interface: Programmer&rsquo;s Guide and Specification <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>JNIEnv定义 <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp23720">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp23720</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/objtypes.html#5190">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/objtypes.html#5190</a><a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>Android Developers JNI Tips <a href="http://developer.android.com/guide/practices/design/jni.html#UTF_8_and_UTF_16_strings">http://developer.android.com/guide/practices/design/jni.html#UTF_8_and_UTF_16_strings</a><a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>代码改编自 (The Java Native Interface Programmer&rsquo;s Guide and Specification)<a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/objtypes.html#27791">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/objtypes.html#27791</a><a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#weak">http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html#weak</a><a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Root 那些事]]></title>
    <link href="http://liuyix.org/blog/2013/android-root/"/>
    <updated>2013-07-14T19:14:00+08:00</updated>
    <id>http://liuyix.org/blog/2013/android-root</id>
    <content type="html"><![CDATA[<h2>Root</h2>

<p>所谓root就是在Android手机上获取最高权限，Android的底层就是Linux，因此Root过程就是普通Linux用户的提权过程。</p>

<!--more-->


<h2>获得Root的几个思路</h2>

<ul>
<li>利用Android内核漏洞(实际上也是Linux的漏洞)进行提权</li>
<li>使用<code>fastboot</code> 或者厂商提供的刷机工具(比如三星的 <em>Odin</em> )刷入修改的Kernel或者第三方的Recovery，再刷入root程序</li>
</ul>


<h2>Root文件</h2>

<ul>
<li>su</li>
<li>root权限管理应用: 如常用的Superuser.apk/SuperSU.apk</li>
</ul>


<h2>Opensourced Superuser</h2>

<p>Android Hack界大神Koush写了被广泛使用的Root管理软件: <a href="https://play.google.com/store/apps/details?id=com.noshufou.android.su&amp;hl=en">Superuser</a>
Koush的Superuser由于Cyanogenmod的一部分，因此是开源的。地址：<a href="https://github.com/koush/Superuser">https://github.com/koush/Superuser</a><br/>
阅读代码我们就可以了解Android的Root管理应用以及su原理以及如何实现的。</p>

<p>未完待续&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse下配置NDK开发环境小结]]></title>
    <link href="http://liuyix.org/blog/2012/android-ndk-eclipse-configuration/"/>
    <updated>2012-03-11T06:11:00+08:00</updated>
    <id>http://liuyix.org/blog/2012/android-ndk-eclipse-configuration</id>
    <content type="html"><![CDATA[<p>分享下最近几周我的一些NDK开发经验和心得。</p>

<p>Eclipse配置NDK环境，主要完成的功能使能调用Android NDK提供的工具链编译用C/C++源代码写好的共享库或者可执行的应用程序。由于我的工作需要的基本是完全native程序的编写，因此这里介绍的方法 <strong>更适合编译Android下的本地应用程序或者共享库</strong></p>

<p>本文提供的方法皆非原创，在这里感谢原创作者的分享。</p>

<h2>NDK环境配置之前</h2>

<p>Eclipse需要事先安装好 <strong>CDT</strong> ，本文在Ubuntu平台上测试可用。</p>

<h2>最简单有效的方法————创建新的Builder</h2>

<p>本方法是在Eclipse中调用NDK提供的 <code>ndk-build</code> 命令进行编译。综合这几周的开发，感觉还是这个方法是最靠谱的。因为你只需要编写一个Android.mk，无需考虑依赖关系，同时也最大程度的遵循了google提供的NDK build方法。</p>

<h3>具体配置步骤</h3>

<ul>
<li><p>新建一个C++ Project</p></li>
<li><p>进入到这个project的 <strong>Propertities</strong> 选项中</p></li>
<li><p><strong>Builders</strong> 一栏 –> <strong>New</strong> –> <strong>Program</strong></p></li>
<li><p>参考下面这张图进行配置，几个重要的地方：</p>

<ul>
<li><p><strong>Location</strong> 填入 <code>$NDK_HOME</code> /ndk-build 其中 <code>$NDK_BUILD</code> 是NDK安装的根目录</p></li>
<li><p><strong>Working Directory</strong> 填入当前project的位置，可以通过选择 <strong>Browse Workspace…</strong> 选择</p></li>
<li><p>可选步骤： <strong>Arguments</strong> 中写下需要传给ndk-build的参数</p></li>
<li><p>如果要实现 <em>auto-build</em> 可以在 <strong>Refresh</strong> 和 <strong>Build Options</strong> 中进行配置，我个人觉得auto-build对开发没有实际作用，因此这里就不介绍了。</p></li>
</ul>
</li>
</ul>


<p>简单几步就可以编译共享库了，够简单吧</p>

<h2>参考链接</h2>

<p><a href="http://mobilepearls.com/labs/ndk-builder-in-eclipse/">Setting up Automatic NDK Builds in Eclipse</a></p>

<h2>其他方法</h2>

<p>这里还有一种我试验可用的方法，但是配置起来实在麻烦，适合移植已有程序或者开发大型项目时完全定制编译过程中使用。这里只给出出处，有兴趣的同学可以看看。</p>

<ul>
<li><a href="http://www.srombauts.fr/2011/03/06/standalone-toolchain/">http://www.srombauts.fr/2011/03/06/standalone-toolchain/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
