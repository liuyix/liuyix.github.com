<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刘毅同学]]></title>
  <link href="http://liuyix.org/atom.xml" rel="self"/>
  <link href="http://liuyix.org/"/>
  <updated>2015-12-17T07:11:19+08:00</updated>
  <id>http://liuyix.org/</id>
  <author>
    <name><![CDATA[liuyix]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python并发编程手册]]></title>
    <link href="http://liuyix.org/blog/2015/python-concurrent-programming/"/>
    <updated>2015-12-17T07:08:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/python-concurrent-programming</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[成为早起者的几个步骤[Quora]]]></title>
    <link href="http://liuyix.org/blog/2015/how-to-be-a-morning-man/"/>
    <updated>2015-12-17T06:46:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/how-to-be-a-morning-man</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.quora.com/How-do-I-become-a-morning-person-1">How do I become a morning person?</a></p>

<p>如何成为一个牛逼的Morning Person,也困扰了我很久。虽然现在依旧没有成功（捂脸）。成为Moring Person后就可以每天早上5点起来在无人打扰的环境里做自己喜欢的或者和梦想有关的事情，当然也可以给自己做一份丰盛的早餐，或者起来加班&hellip;.</p>

<!--more-->


<p>成为Morning Person的几个步骤：</p>

<h3><strong>Step 1</strong> 睡前做好准备。</h3>

<p>睡前就把第二天早上的计划想好，减少你通常在早上需要做的决定，能尽早决定的就晚上确定下来。比如第二天要早期读书，那么就确定好要读哪本书，具体从哪一章节开始，要读多久等等。做决策会消耗精力导致疲劳，所以不要把早上的充沛的精力花费在考虑今天开穿什么衣服，想吃什么早餐这样的决定上。</p>

<p>所以在睡前你要做好：</p>

<ul>
<li>装好包随时可以出门上班</li>
<li>准备好早上要穿的衣服</li>
<li>准备好早餐</li>
<li>确定好早上计划要搞定的几件事</li>
</ul>


<h3><strong>Step 2</strong> 睡你麻痹起来嗨！</h3>

<p>早上一睁开眼睛关了闹钟，忽略身体上的不适感，立马从床上跳下来，做十个立定跳远！
就这么简单！！！10个立定跳远，让身体的血液流动起来，激活能量，人也就精神起来了。</p>

<h3>Step 3（最重要的一点）<red>给自己找一个充分的早起理由——让早起富有意义</red></h3>

<p>这个步骤并不是说在醒来之后告诉自己一些上纲上线的理由，什么生活有多美好啦，或者多么幸运啦（除非这是你早上时间主要的活动，我完全支持）。
你需要有一些你想在清晨做的事情，比如完成繁忙的一天中最该尽早完成的任务（a task you want to accomplish early on before the madness of the day starts to slow you down），你需要参加的会议、活动（有大清早开的会吗&hellip;.我个人理解是需要早起赴约，比如比赛或者赶车），或者锻炼等等。总之，你要有一个无法拒绝的早起的理由。要不大清早起来后，发现老子清晨五六点起来毫无意义，你很可能就又回去睡回笼觉了。<strong>你必须要有一些『只是想一想都有些小激动呢』放在早上来做</strong>，或者<strong>有一些可以让你充满正能量，让你感觉非常开心的，能让一整天达到最佳状态的事情</strong>，这样早起才充满动力。</p>

<p>举几个栗子，这个步骤很好懂，因为要事要早起——赶火车，飞机，外出集合，或者有非常让你小激动的事情——你要陪女神早上跑步，仅仅这些充满诱惑力的理由，即使没有任何准备你也会早起，不是吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quora每周摘选(第1期)]]></title>
    <link href="http://liuyix.org/blog/2015/my-quora-digest-issue-1/"/>
    <updated>2015-12-15T23:13:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/my-quora-digest-issue-1</id>
    <content type="html"><![CDATA[<blockquote><p>因为订阅了Quora Digest，发现推送的邮件里面好多不错的文章。这里每周会从我读到的Quora里面翻译部分精选。</p></blockquote>

<ul>
<li><a href="https://www.quora.com/How-do-I-become-a-morning-person-1">How do I become a morning person?</a> ==> <a href="http://liuyix.org/blog/2015/how-to-be-a-morning-man/">成为早起者的几个步骤</a>

<ul>
<li>这篇Post提供了几个比较有效的早起的技巧，最打动我的就是早起你要有一个让自己兴奋到必须要早起的理由。</li>
</ul>
</li>
<li><a href="https://www.quora.com/Is-staying-a-software-engineer-your-whole-life-a-good-career-choice">Is staying a software engineer your whole life a good career choice?</a> ==> 选择做一辈子软件开发是否明智？

<ul>
<li>其实无论在国内还是国外，程序员的职业发展都差不多，要么转管理要么继续Coding</li>
</ul>
</li>
<li><a href="http://qr.ae/RbVArL">What are some of the most important things that we should be informed about in life?</a> ==> 有哪些生活中我们应该知道的重要的事？

<ul>
<li>还是一篇在<em>Life Lessons</em>版过万的upvote的帖子，这周有时间翻译下。</li>
</ul>
</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Data Model]]></title>
    <link href="http://liuyix.org/blog/2015/python-data-model/"/>
    <updated>2015-10-22T08:41:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/python-data-model</id>
    <content type="html"><![CDATA[<blockquote><p>本文介绍了『Python Data Model』官方的总结笔记，主要内容是Python对象的详细介绍</p></blockquote>

<p>Original: <a href="https://docs.python.org/2/reference/datamodel.html#data-model">https://docs.python.org/2/reference/datamodel.html#data-model</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 10.12 El Capitan上octopress的安装]]></title>
    <link href="http://liuyix.org/blog/2015/octopress-on-el-capitan/"/>
    <updated>2015-10-22T08:30:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/octopress-on-el-capitan</id>
    <content type="html"><![CDATA[<blockquote><p>本文介绍了在El Capitan上安装Octopress时遇到的几个问题及解决方案</p></blockquote>

<h2>Rubygems安装源慢</h2>

<h2>Errno::ENOENT: No such file or directory &ndash; Jekeyll</h2>

<p><a href="http://schalkneethling.github.io/blog/2015/10/16/errno-enoent-no-such-file-or-directory-jekyll-octopress-el-capitan/">http://schalkneethling.github.io/blog/2015/10/16/errno-enoent-no-such-file-or-directory-jekyll-octopress-el-capitan/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docopt -- Python必备的命令行接口模块]]></title>
    <link href="http://liuyix.org/blog/2015/python-docopt/"/>
    <updated>2015-10-21T00:02:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/python-docopt</id>
    <content type="html"><![CDATA[<p>docopt很适合经常需要用python写命令行工具的同学使用。</p>

<h2>docopt之前</h2>

<p>工作需要，经常会用大块的代码来定(ren)义(rou)命令行界面的工具。代码经常是如下的样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">optparse</span>
</span><span class='line'>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="n">optparse</span><span class="o">.</span><span class="n">OptionParser</span><span class="p">()</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;--foo&#39;</span><span class="p">,</span> <span class="s">&#39;-f&#39;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;1&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;int&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&#39;--bar&#39;</span><span class="p">,</span> <span class="s">&#39;-b&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&#39;store_true&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># 类似以上的代码大概几十行</span>
</span><span class='line'>
</span><span class='line'><span class="n">opts</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>每一个python脚本都需要提供类似的接口。因此每一次都需要写类似的代码。在写过几次后为了保持DRY原则，我将初始化parser封装为一个method放在util部分。可是依旧是逃不过重复的写<code>parser.add_option</code>。不止一次地我考虑干脆自己写个模板类，以后命令行的定义直接以配置文件的形式写出来，然后每次都通过读取这个配置文件自动化的去生成parser。我相信这个问题我一定不是第一个遇到，应该会有已知的模块解决这个laber intensive的工作。</p>

<p>正在这个时候，偶然看到Python weekly发现了docopt</p>

<h2>docopt</h2>

<p>docopt官网地址：<a href="http://docopt.org/">http://docopt.org/</a></p>

<p>docopt的作者有一个30分钟的视频很好的介绍了docopt这个moudule。推荐大家看一下，自备梯子~ <a href="https://youtu.be/pXhcPJK5cMc">https://youtu.be/pXhcPJK5cMc</a></p>

<p>更令懒人们惊喜的是作者还制作了一个js版本的docopt，可以让你在浏览器中把玩docopt： <a href="http://try.docopt.org/">http://try.docopt.org/</a></p>

<p>使用docopt后，代码上会更加Pythonic，具有很高的可读性，命令行接口的定义所见即所得的样式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#docopt example</span>
</span><span class='line'>
</span><span class='line'><span class="n">mydoc</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;Naval Fate.</span>
</span><span class='line'>
</span><span class='line'><span class="s">Usage:</span>
</span><span class='line'><span class="s">  naval_fate.py ship new &lt;name&gt;...</span>
</span><span class='line'><span class="s">  naval_fate.py ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]</span>
</span><span class='line'><span class="s">  naval_fate.py ship shoot &lt;x&gt; &lt;y&gt;</span>
</span><span class='line'><span class="s">  naval_fate.py mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored|--drifting]</span>
</span><span class='line'><span class="s">  naval_fate.py -h | --help</span>
</span><span class='line'><span class="s">  naval_fate.py --version</span>
</span><span class='line'>
</span><span class='line'><span class="s">Options:</span>
</span><span class='line'><span class="s">  -h --help     Show this screen.</span>
</span><span class='line'><span class="s">  --version     Show version.</span>
</span><span class='line'><span class="s">  --speed=&lt;kn&gt;  Speed in knots [default: 10].</span>
</span><span class='line'><span class="s">  --moored      Moored (anchored) mine.</span>
</span><span class='line'><span class="s">  --drifting    Drifting mine.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">docopt</span> <span class="kn">import</span> <span class="n">docopt</span>
</span><span class='line'>
</span><span class='line'><span class="n">arguments</span> <span class="o">=</span> <span class="n">docopt</span><span class="p">(</span><span class="n">mydoc</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;0.1&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">arguments</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就定义了一个丰富的命令行接口。命令行接口提供了<code>--help</code>和<code>--version</code>两个基础功能。其中<code>--help</code>输出<code>mydoc</code>，<code>--version</code>输出指定的<code>version</code>信息。</p>

<p>接口还提供了2个参数（ship, mine），每种参数还提供了不同的几种参数的组合。其中<code>[...]</code>内是可选参数，<code>(...|...)</code>是互斥参数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress迁移到新主机]]></title>
    <link href="http://liuyix.org/blog/2015/new-mac-test/"/>
    <updated>2015-08-24T00:04:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/new-mac-test</id>
    <content type="html"><![CDATA[<ul>
<li>新机器上首先是把ssh key加入到github的setting，然后配置好基本的git信息（email, name），此处步骤略过。可以参考：<a href="https://help.github.com/articles/set-up-git/">https://help.github.com/articles/set-up-git/</a></li>
<li><code>git clone -b source git@github.com:username/username.github.com.git octopress</code>

<ul>
<li>操作完这一步后就相当于把当前octopress的source文档拉到了本地了。</li>
<li><strong>这一步操作前一定要确保在其他机器上的markdown文件以及其他配置文件的修改都已经push到source分支了，否则这一步会导致博客文章丢失！！！</strong></li>
</ul>
</li>
<li>进入到octopress, 然后<code>git clone git@github.com:username/username.github.com.git _deploy</code>

<ul>
<li>这一步是在<code>_deploy</code>建立好指向master分支的git仓库，方便之后发布文章时使用</li>
</ul>
</li>
<li>安装octopress相关的ruby依赖等

<ul>
<li>建议修改rubygems的安装源到国内的taobao源，详细操作步骤：<a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a>，默认的rubygems.org源已经被墙，速度很慢。</li>
</ul>
</li>
</ul>


<p>完成上面几步后，就可以尝试调用<code>rake generate</code>生成一次网站，然后<code>rake deploy</code>看下是否成功~</p>

<h3>在不同主机上使用Octopress上发布文章</h3>

<p>每次发布新的文章或者修改现有文章时，需要把<code>source</code>分支的修改（即octopress目录所指向的git仓库分支）commit并且push到github上，之后在另外的主机上首先进入到octopress目录，在编辑文章前首先<code>git pull</code>下拉取修改。这样的编辑才能连贯，不然会发生文章丢失的情况。</p>

<p>Reference:</p>

<ul>
<li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></li>
</ul>


<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由互联网中的Python应用想到的网站架构的优化]]></title>
    <link href="http://liuyix.org/blog/2015/python-in-industry/"/>
    <updated>2015-04-08T22:56:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/python-in-industry</id>
    <content type="html"><![CDATA[<ul>
<li>国内<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>

<ul>
<li>知乎</li>
<li>豆瓣</li>
<li>果壳网</li>
</ul>
</li>
<li>国外，只列出我认识的比较出名的，还有好多<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>=。=

<ul>
<li>Quora 国外的知乎？</li>
<li>Dropbox 国外的金山快盘？</li>
<li>Disqus 国外的多说？</li>
<li>Pinterest 国外的花瓣？</li>
<li>Youtube 国外的优酷？</li>
<li>Slideshare 国外的百度文库？</li>
<li>reddit 国外的猫扑？</li>
<li>Yelp 国外的大众点评</li>
<li>&hellip;</li>
</ul>
</li>
</ul>


<p>更多的信息可以参考Python官网的<a href="https://www.python.org/about/success/">Python Success Stories</a>。</p>

<h3>Quora</h3>

<p>下面是QuorWhy did Quora choose Python for its development?a创始人在Quora上对<em>Why did Quora choose Python for its development?</em>的回答<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<blockquote><p>We decided that Python was fast enough for most of what we need to do (since we push our performance-critical code to backend servers written in C++ whenever possible). As far as typechecking, we ended up writing very thorough unit tests which are worth writing anyway, and achieve most of the same goals.</p></blockquote>

<p>可以看到对于Python的性能短板，Quora在performance-critical的地方尽可能换用了C++。对于Python没有静态类型，Quora用尽可能的单元测试来确保质量。之所以选择Python其实很大的原因是Founder对Python比较擅长。
进一步google了下，他们的框架用的Pylon。</p>

<h3>知乎的技术架构</h3>

<p>知乎CTO在去年年底有过分享，目前在InfoQ上能找到整理稿。链接：<a href="http://www.infoq.com/cn/news/2014/12/zhihu-architecture-evolution">http://www.infoq.com/cn/news/2014/12/zhihu-architecture-evolution</a></p>

<p>简而言之用的tornado，自己开发了日志系统Kids，消息传递系统Sink，还有页面渲染ZhihuNode。</p>

<h3>网站架构及性能的思考</h3>

<p>本周听了一次FB周海平在阿里内部的一次分享。无论是阿里、Facebook还是豆瓣，我发现了在网站架构上这几家有很多共同点的：</p>

<ul>
<li>MySQL作为存储后端</li>
<li>MySQL上一定有memcache、tair这样的KV系统做缓存</li>
<li>都各自开发了适合自己的消息分发系统，Notify, Thrift, Beanstalkd</li>
<li>后端应该都具有实时日志数据分析： HBase、云梯2、Kids</li>
<li>不同程度上用异步化来提高性能，并会一直以此来作为性能提升的方法。</li>
<li>消息链路上的优化：一个网页的渲染上是树状结构的获取数据，因此可以在通过优化这棵树来达到优化整个过程的目的</li>
</ul>


<h3>其他</h3>

<p>网站选型不单纯是比较语言优劣，还和社区的发展趋势活跃(谁都不想用过一门可能几年就无人问津的语言)、团队内普遍的好恶和掌控能力（C、C++最好，但是大家都不会）、整个行业的形势（团队内都用Lisp，但是招不到人）等等多种因素有关系。
选择哪门语言确实重要，这决定了未来几年或者更远的时间内技术的发展路线，更重要的当规模扩大后需要在性能优化上要付出的代价。（这里面可以拿Facebook优化PHP作为反例，若是当初扎克用的是java或者c++，也许也不会因此如此兴师动众的重写了PHP生态系统里面的大部分东西。）</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.zhihu.com/question/19685768">知乎-国内使用 Python 作为主要开发语言的知名网站有哪些</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://www.quora.com/Which-Internet-companies-use-Python">Quora-Which Internet companies use Python?</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://www.quora.com/Why-did-Quora-choose-Python-for-its-development">Quora-Why did Quora choose Python for its development?</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python logging模块]]></title>
    <link href="http://liuyix.org/blog/2015/python-logging/"/>
    <updated>2015-04-05T23:46:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/python-logging</id>
    <content type="html"><![CDATA[<h2>Python logging使用</h2>

<h3>多模块使用logging</h3>

<p>不要在每个模块里面都创建新的logger，不然会导致重复的log日志输出。只需要在子模块开始：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import logging
</span><span class='line'>LOGGER = logging.getLogger('foo module')
</span><span class='line'>LOGGER.setLevel(logging.DEBUG)
</span><span class='line'>
</span><span class='line'>....
</span><span class='line'>
</span><span class='line'>LOGGER.info('info level logging mesg')
</span><span class='line'>LOGGER.debug('....')</span></code></pre></td></tr></table></div></figure>


<p>在主模块必须要初始化<code>root</code>层logging。
python的logging层次化的，最上层的即root的logger初始化可以由<code>logging.getLogger('')</code>来拿到然后进行配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git workflow]]></title>
    <link href="http://liuyix.org/blog/2015/git-workflow/"/>
    <updated>2015-04-05T23:30:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/git-workflow</id>
    <content type="html"><![CDATA[<p>Git近几年有逐渐取代svn的趋势，一部分原因是github的风靡，google code也关门大吉，令人唏嘘<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。很多公司开始逐渐从svn代码仓库迁移到企业私有版的github&mdash;<a href="https://gitlab.com/">gitlab</a>。知道怎么玩git是大势所趋。</p>

<p>Git小白推荐读物：atlassian出版的<a href="https://www.atlassian.com/git/tutorials">Git Tutorials</a>，这家公司拥有mac上最佳git客户端SourceTree以及Bitbucket。</p>

<p>本文是对<a href="https://www.atlassian.com/git/tutorials/comparing-workflows">Comparing Workflows</a>这篇文章和自己的使用心得所做的总结。</p>

<p>以下三种工作流只是典型的代表，不是规范，而是参考，可以结合自己的使用特点灵活选择和修改。</p>

<ul>
<li>Centralized Workflow</li>
<li>Feature Branch Workflow</li>
<li>Gitflow</li>
</ul>


<!--more-->


<h3>Centralized Workflow</h3>

<ul>
<li>适合几个人的小项目或者自己玩。</li>
<li>和svn差别小。</li>
<li>多人协作采用rebase方式并入master。

<ul>
<li>小李和小红分别把代码拉到本地进行开发，然后小李先提交到了master，这时候小红再提交她的修改会被reject，因为push的过程中小红本地的Master分支和remote（服务器）上的不同。这时候小红需要<code>git pull --rebase origin master</code>将远程的代码和她本地的修改进行融合，融合的目的是让小红提交的所有的commit看起来实在小李同学push到master分支后的那个点开始做的。</li>
</ul>
</li>
</ul>


<p><img src="https://www.atlassian.com/git/images/tutorials/collaborating/comparing-workflows/centralized-workflow/11.svg" alt="小红在小李之后push到master" /></p>

<h3>Feature Branch Workflow</h3>

<ul>
<li>适合几个人的小项目。</li>
<li>利用<em>pull request</em>进行code review和交流改进。</li>
</ul>


<p>相比<em>Centralized Workflow</em>，这个工作流没有增加多少内容，只是在merge过程时一定要创建<code>pull request</code>让大家可以有个代码review和交流修改的过程。</p>

<h3>Gitflow</h3>

<p>比较适合多人的大型项目。</p>

<p><img src="http://nvie.com/img/git-model@2x.png" title="git branching model" alt="git branching model" /></p>

<ul>
<li>master</li>
<li>develop</li>
<li>release</li>
<li>feature</li>
<li>bugfix</li>
</ul>


<!-- 一个例子是线上生产稳定的跑着1.2版本（master分支），开发和测试主要活跃在develop分支，产品路线图中计划的下个月的1.3版本的发布是develop的一个release分支。在1.3版本中总共加入了3个feature和5个bugfix，总共由4个人负责代码开发。-->




<!--2个主要分支：master和develop。master分支对应生产环境跑的代码，很像rpm包的`current channel`；develop对应的就是rpm发布的`test channel`，feature和release在完成后都会并入到develop分支。-->


<h3>More Readings</h3>

<ul>
<li><a href="http://paulhammant.com/2014/01/08/googles-vs-facebooks-trunk-based-development/">Google&rsquo;s vs Facebook&rsquo;s Trunk Based Development</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入职9月谈]]></title>
    <link href="http://liuyix.org/blog/2015/career-nine-months-review/"/>
    <updated>2015-02-13T23:37:00+08:00</updated>
    <id>http://liuyix.org/blog/2015/career-nine-months-review</id>
    <content type="html"><![CDATA[<p>2015年5月12日，由学生正式成为职场新人。至今已经刚满九月。适逢春节假期，可以静下来审视下自己这几个月来的生活。有很多话要说，但是又不知道从何说起。</p>

<p>在阿里的这几个月中我经历了三淘单元化的实施，经历了大规模集群实例迁徙，经历了AIS组织架构调整，经历了全链路压测，经历了2014年的双十一。。。仿佛被汹涌的海浪一下子卷了进去一般。  从学生变成了IT民工，这种转变有点让人感觉措手不及。<br/>
社会角色的转变后的迷惘、突入从没有来过的陌生城市后的紧张，（更让人悲喜交加的是）刚入职就“摊上大事”的我，这段时间以来以极快的速度感觉自己老了很多。</p>

<h3>数据大迁徙</h3>

<p>入职后不久机缘巧合之下就接了备份恢复的差事，第一次满怀崇拜和学习的心态揭开了基础系统程序的面纱，结果。。。卧槽！卧槽卧槽！以下省略一万字。。。<br/>
没有看到想象中教科书般工整牛逼的代码反而是让人唏嘘不已无法直视的代码。本身自己对MySQL甚至对数据库就没有多少了解，本科和研究生时对数据库是毫无感觉的，只依稀记得考试时写了几个比较牛逼的SQL。现在却要接手MySQL备份恢复，心理觉得压力增加了不少。<br/>
更加万万没想到的是更大的考验就在零零散散交接完成后的几天就纷至沓来。第一波是杭州单元化建设，第一次有了酸爽的感觉，这一次规模<em>相对</em>较小，本身又是刚刚交接，所以有一些棘手的问题还是找到了原来的同学帮忙处理解决掉了。<br/>
真正的挑战是第二波上海异地双活。根据大部门总体进度时间表，分配给数据库的时间只有2周左右，更悲剧的是由于其他团队的工作延期，剩下的时间还比计划的时间更短。</p>

<p>数据库异地双活项目中最重要的就是三部分内容，一部分是元数据梳理，一部分是实例迁移，一部分是TDDL切换。其中最耗时的一环就是通过备份恢复的方式进行实例迁移。简单讲就是几乎把所有的实例都要做一遍备份和恢复实现一个级联的门子结构。<br/>
在工具还没有完善的时候就只有通过半自动半人工的方式来完成。团队专门成立了拆迁办小分队，每个人负责专门的一块——元数据梳理、资源分配调度、平台前端开发、平台后端任务还有备份恢复子任务，一环套着一环，分秒必争的赶进度，这一段时间是最苦逼的，但是无论何时，回想起来都会觉得特别牛逼，那种几个人为了同一个的目标争分夺秒玩命干活的感觉，很难忘。在这过程中一边熟悉并修补一边赶进度，生平第一次感觉到了焦虑崩溃的边缘，到了自己的极限，很想放弃。可是我放弃了，没有人可以backup起来，即使是之前的同学，因为从没有经历过如此大规模的迁徙任务————没有退路，那就只能勇往直前。
奇迹般地，我在最后期限的那一天完成了几乎所有的实例迁移任务，没有拖团队的后腿。</p>

<p>副作用是对技术产生了阴影，感觉心里有些抑郁了。到现在感觉潜意识里面还是把那段痛苦和备份恢复挂钩了。一直是心有余悸。</p>

<p>让我有一些宽慰的是可能是因为这次为大部门立下了“大功”，在14年的部门年会上拿到了最佳新人奖和一个上海建站的团队奖。</p>

<p>同时我也要感谢这一次大项目的洗礼，让我对一些本质任务我是否真的喜欢做技术？我现在有些怀疑了。可是不做技术，我还能做什么呢？</p>

<h3>收获</h3>

<p>2014年年会上拿到了一个最佳新人奖——“破茧成蝶”还有一个团体奖“众志成城”。七八月份的付出是得到了老大们的认可的。</p>

<h3>数据库单元化搭建&mdash;两次</h3>

<p>开始</p>

<h3>上海建站</h3>

<h3>双十一</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tips]]></title>
    <link href="http://liuyix.org/blog/2014/python-tips/"/>
    <updated>2014-09-22T14:15:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/python-tips</id>
    <content type="html"><![CDATA[<h3>Python实现tail</h3>

<p>credit: <a href="http://stackoverflow.com/q/136168">http://stackoverflow.com/q/136168</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 5.6 GTID 学习笔记]]></title>
    <link href="http://liuyix.org/blog/2014/mysql-gtid-introduction/"/>
    <updated>2014-09-20T18:45:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/mysql-gtid-introduction</id>
    <content type="html"><![CDATA[<h3>Reading List</h3>

<ul>
<li>Facebook部署5.6 GTID的blog: <a href="https://www.facebook.com/notes/mysql-at-facebook/lessons-from-deploying-mysql-gtid-at-scale/10152252699590933">Lessons from Deploying MySQL GTID at Scale</a>(需要翻墙)

<ul>
<li>Facebook@Percona Live 2014 <a href="http://www.percona.com/live/mysql-conference-2014/sessions/global-transaction-id-facebook">GLOBAL TRANSACTION ID AT FACEBOOK</a></li>
<li>MySQL Manual使用时GTID时的限制：<a href="http://dev.mysql.com/doc/refman/5.6/en/replication-gtids-restrictions.html">17.1.3.4 Restrictions on Replication with GTIDs</a></li>
</ul>
</li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ability_review]]></title>
    <link href="http://liuyix.org/blog/2014/ability-review/"/>
    <updated>2014-09-20T18:43:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/ability-review</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Tips]]></title>
    <link href="http://liuyix.org/blog/2014/bash-tips/"/>
    <updated>2014-09-14T16:59:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/bash-tips</id>
    <content type="html"><![CDATA[<h3>Bash 遇到错误就退出</h3>

<p><a href="http://stackoverflow.com/a/4382179">http://stackoverflow.com/a/4382179</a></p>

<p><code>set -e</code></p>

<blockquote><p>If you put set -e in a script, the script will terminate as soon as any command inside it fails (i.e. as soon as any command returns a nonzero status). This doesn&rsquo;t let you write your own message, but often the failing command&rsquo;s own messages are enough.</p>

<p>The advantage of this approach is that it&rsquo;s automatic: you don&rsquo;t run the risk of forgetting to deal with an error case.</p>

<p>Commands whose status is tested by a conditional (such as if, &amp;&amp; or ||) do not terminate the script (otherwise the conditional would be pointless). An idiom for the occasional command whose failure doesn&rsquo;t matter is command-that-may-fail || true. You can also turn set -e off for a part of the script with set +e.</p></blockquote>

<h2>Bash使用数组</h2>

<h3>快速入门</h3>

<p>(Bash For Loop Array: Iterate Through Array Values)[<a href="http://www.cyberciti.biz/faq/bash-for-loop-array/">http://www.cyberciti.biz/faq/bash-for-loop-array/</a>]</p>

<ul>
<li>用括号指定，空格指定就好</li>
<li>遍历： <code>for i in "${var[@]}"</code></li>
</ul>


<h3>深入</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'># array-ops.sh: More fun with arrays.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>array=( zero one two three four five )
</span><span class='line'># Element 0   1   2    3     4    5
</span><span class='line'>
</span><span class='line'>echo ${array[0]}       #  zero
</span><span class='line'>echo ${array:0}        #  zero
</span><span class='line'>                       #  Parameter expansion of first element,
</span><span class='line'>                       #+ starting at position # 0 (1st character).
</span><span class='line'>echo ${array:1}        #  ero
</span><span class='line'>                       #  Parameter expansion of first element,
</span><span class='line'>                       #+ starting at position # 1 (2nd character).
</span><span class='line'>
</span><span class='line'>echo "--------------"
</span><span class='line'>
</span><span class='line'>echo ${#array[0]}      #  4
</span><span class='line'>                       #  Length of first element of array.
</span><span class='line'>echo ${#array}         #  4
</span><span class='line'>                       #  Length of first element of array.
</span><span class='line'>                       #  (Alternate notation)
</span><span class='line'>
</span><span class='line'>echo ${#array[1]}      #  3
</span><span class='line'>                       #  Length of second element of array.
</span><span class='line'>                       #  Arrays in Bash have zero-based indexing.
</span><span class='line'>
</span><span class='line'>echo ${#array[*]}      #  6
</span><span class='line'>                       #  Number of elements in array.
</span><span class='line'>echo ${#array[@]}      #  6
</span><span class='line'>                       #  Number of elements in array.
</span><span class='line'>
</span><span class='line'>echo "--------------"
</span><span class='line'>
</span><span class='line'>array2=( [0]="first element" [1]="second element" [3]="fourth element" )
</span><span class='line'>#            ^     ^       ^     ^      ^       ^     ^      ^       ^
</span><span class='line'># Quoting permits embedding whitespace within individual array elements.
</span><span class='line'>
</span><span class='line'>echo ${array2[0]}      # first element
</span><span class='line'>echo ${array2[1]}      # second element
</span><span class='line'>echo ${array2[2]}      #
</span><span class='line'>                       # Skipped in initialization, and therefore null.
</span><span class='line'>echo ${array2[3]}      # fourth element
</span><span class='line'>echo ${#array2[0]}     # 13    (length of first element)
</span><span class='line'>echo ${#array2[*]}     # 3     (number of elements in array)
</span><span class='line'>
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>(Arrays)[<a href="http://www.tldp.org/LDP/abs/html/arrays.html">http://www.tldp.org/LDP/abs/html/arrays.html</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拖延的反思]]></title>
    <link href="http://liuyix.org/blog/2014/procrastination-helps/"/>
    <updated>2014-09-14T11:39:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/procrastination-helps</id>
    <content type="html"><![CDATA[<p>昨天在多看阅读中看到的一篇关于拖延症的文章&mdash;《“被绑架”了的拖延症患者 &mdash; 爱上拖延症的八个理由》。原始出处已无法考据，感谢原作者的分享。在网上找到了一个<a href="http://talk.ifeng.com/zaixianjiangtang/shys/special/tuoyanzheng/zuixin/detail_2012_10/30/18669615_0.shtml">引用链接</a>。</p>

<p>之前也正好看到了李松蔚在微信公众账号里面发表的拖延症系列文章中的《框架中的拖延者（3）：和解，无关明日》，二者有想通之处：拖延是内心不和谐的表征，造成拖延一定有更深层次的原因。如果发生拖延了不深究原因只一味的自责，那么拖延只会恶化，身心不会得到解脱，真正的“病因”因此会一直纠缠着自己。</p>

<p>在《被绑架》一文中，笔者就内省自己拖延的原因，勇敢的做出了改变。</p>

<p>笔者自述自己拖延中大部分时间是用来玩游戏、听音乐、看电影、读文章、读书。相比于『有意义的工作』，笔者把这作为自己内省和成长的一部分。</p>

<p>这一点上我部分赞同，不想工作必然有其他可理解的原因，不仅仅是『找回属于自己的时间』。我觉得拖延不做工作，尤其是周末。有可能是自己的身体在通过『懒惰小人』告诉自己需要休息放松。<em>人不是机器，一般情况下很难长期保持高强度的工作。</em></p>

<p>在“行为和内心一致”这一节中，笔者在工作中发现越来越讨厌工作，逃避工作。</p>

<blockquote><p>这一阶段的拖延虽然还有漫无目的的无聊，但更多的是一些有意识地利用拖延下来的时间学习哲学、心理学或者英语和写作等相关技能
事后从这个角度看，事情甚至完全反过来，就像是为了获得收入和安全感拖延了我的学习时间而去做无趣的工作。</p></blockquote>

<p>笔者确实发现了自己不喜欢自己的工作。（事后也用自己的行动的结果说明了自己在其他领域有更好的发展。）但是通常而言无论是什么事，总有你不愿意做的部分和喜欢做的部分。认清自己内心到底喜欢做什么并能持之以恒，这是需要智慧的。若是缺乏智慧，则误把因为“懒”做事挑肥拣瘦当做这不是我喜欢做的工作。今天从银行辞职该做摄影师，坚持不了多久又觉得摄影不是真正喜欢的事情，又改写小说&hellip;<br/>
用智慧做出判断，用勇气做出改变相比治疗拖延症是更重要的。
关于如何甄选自己喜欢的职业，建议读一读<a href="http://book.douban.com/subject/4953695/">《拆掉思维里的墙》</a>这本书。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[积跬步至千里]]></title>
    <link href="http://liuyix.org/blog/2014/keep-doing-make-miracle/"/>
    <updated>2014-09-13T21:19:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/keep-doing-make-miracle</id>
    <content type="html"><![CDATA[<p>焦虑的我今天冥冥中发现了BYVoid的github，进而去他的博客兜了一圈，感触良多。先介绍下背景。</p>

<p>BYVoid这个人是去年校招时听闻的。那时刚参加完阿里的校招，还没有出结果，焦急的等待中持续关注着北邮人论坛的有关阿里校招的消息。那个时候不知阿里内部哪位好事者漏出了一张阿里校招时给出A+ offer的面试后台系统记录截图。（A+就是去年阿里校招的阿里星计划，60W年薪+股票期权），这个八卦中的主角就是郭家宝，网名BYVoid。一个九零后的清华本科生，本科的假期在MSRA，Google，Hulu，Facebook有过实习经历，初高中参加信息学竞赛，后来保送到清华。还出过一本书<a href="http://book.douban.com/subject/10789820/">《Node.js开发指南》</a>。<br/>
关于他个人的更多介绍，可以看下他的博客介绍：<a href="https://www.byvoid.com/zht/about/resume">链接</a>以及他的报告<a href="https://byvoid.github.io/slides/experiences-2014/index.html">《我的一些经历》</a></p>

<p>我最感兴趣的是<em>一个牛人是如何成长的</em>，<em>他的博客文章的质量是如何提高的</em>。进到博客一看发现这位新秀从2007年就开始写博客了(2010年才上大学)。于是我就从最后面的文章开始翻起来，有种在读别人的日记的赶脚&hellip;（兴致勃勃的去看一个本科毕业生在初三时写的文章，没有这种赶脚才怪呢）BYVoid<br/>
这几年确实没少写。每个月有十几篇二十几篇的数量。</p>

<p>花了一个晚上的时间把所有的文章题目过了一遍。感触挺多:
技术牛人其实也是普通人，只是做事更加深入、认真，专注一些和坚持久一些『罢了』。</p>

<h4>履历</h4>

<p>BYVoid初中一次偶然的机会，他的老师发现了他在信息学上的天分（拿出一张卷子让他做，结果竟然很多都做对了，后来才知道这是去年的信息学竞赛试题）。也许就是这样的契机让郭同学的人生轨迹变得和同龄人与众不同。之后郭家宝同学通过竞赛保送到省实验中学，之后的高中几年就一直在做信息学竞赛。从他的博客上来看，BYVoid不仅是有天分，本身也很喜欢信息学竞赛，解数学题。他不仅做了老师要求的内容，还在课下自己主动刷题训练（高中的文章很多都是UASCO解题报告）。高中联赛名次不错，最后联赛超常发挥拿到了国家比赛的金牌，靠这块金牌顺利的保送到了清华大学，这时的他才高中二年级。接下去的一年和很多人不同的是，他不再有高考压力，于是在看新白娘子传奇的过程中，发现了自己对汉语字体的兴趣，逐渐开始了汉字研究。到了大学，还保持着这份兴趣。建立了至今广为使用的Opencc开源项目。<br/>
<em>良好的编程功底</em>加上清华大学计算机系拥有的资源，BYVoid在MSRA, Hulu, Google, Facebook都做过实习。今年毕业的他应该是去了瑞士Google（从他的LinkedIn了解到的）</p>

<h4>感悟</h4>

<ul>
<li>不怀目的的写作是最真实的成长记录，<a href="https://www.byvoid.com/zhs/blog/read-rss">这篇文章</a>就是很好的一个例子。</li>
<li>任何人都是从基础逐渐开始成长。写作的能力也一样，长文写作也是一点点培养建立的，BYVoid自己也做了几年博客文章的一个总结（<a href="https://www.byvoid.com/zhs/blog/my-blog-four-years">link</a>）。技能的提高都是通过不断的坚持练习达到的。对于写作来说只有不断的写，开始时也许文字会短小、不连贯，包含很多主观的随感以及转载。但是不断的坚持，慢慢的开始有了深度和广度。在BYVoid的博客中我看到了<strong>每一个阶段都是真实的表现了自己同期的水平和状态</strong>，一个初中生不会一开始就会写出有研究深度的文章和报告而是会写出介绍环境搭建、介绍Vim用法等入门心得。没有刻意地训练只是日积月累的写作，量变终会得到质变。写就<a href="https://byvoid.github.io/slides/cassandra/index.html"><Cassandra></a>、<a href="https://byvoid.github.io/slides/bitcoin-internals/index.html">Bitcoin Internals</a>这样的Slides。</li>
<li><strong>兴趣</strong>、<strong>自我驱动</strong>更有可能成为领域达人。退一步讲成为不了达人，自己也可以自得其乐。这也是『过程比结果重要』的一种诠释吧。兴趣使然 &mdash;> 深入研究 &mdash;> 升华提高。</li>
<li><strong>持久</strong>和<strong>钻研</strong>的个性是能力持续提高的秘诀。拥有兴趣而没有持之以恒的坚持也很难成为一位达人（当然也可以将持久作为兴趣定义的属性）。这些文章 <a href="https://www.byvoid.com/blog/string-hash-compare">Hash函数比较</a>，<a href="%E7%A0%B4%E8%A7%A3Firefox%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%99%A8%E5%8A%A0%E5%AF%86%E7%9A%84%E4%BF%A1%E6%81%AF">破解Firefox密码管理器加密的信息</a>，<a href="https://www.byvoid.com/zhs/blog/firefox-js">CmYkRgb123 Online Grading System</a> ，还有OpenCC 不仅能看出他的兴趣也能感受到一份钻研的热情。</li>
</ul>


<p>拥有足够浓厚的兴趣和一个非功利的健康心态很容易成为某一领域的达人。但是如果没有这些，只要你：持之以恒、不浮躁、耐心、钻研、自我驱动也一样可以达成。</p>

<h3>『我不追求输赢，我只是认真』</h3>

<p>『钻研』是BYVoid给我印象最深的一点。作为一种个性，不仅是在技术能力上体现，会在生活的很多方面能感受得到。高中信息学竞赛时，他把NOIP2000到2007年所有题都做了一遍<a href="https://www.byvoid.com/blog/noip-allsolutions/">link</a> 并整理出来这个就不是所有人都能做到的。还有他特别爱玩仙剑奇侠传游戏，这个很多人都爱玩，但是很少有人像他这样详细相关的情节、剧情都详细写成评测文章，<a href="https://www.byvoid.com/blog/pal4-experience">仙剑四</a>，<a href="https://www.byvoid.com/zhs/blog/tag/%E4%BB%99%E5%8A%8D%E4%BA%94">仙剑五系列</a>。或者看一部电影做一个影评<a href="https://www.byvoid.com/zhs/blog/under-the-hawthorn-tree">山楂树之恋</a>。还体现在文字的研究上，从他的<a href="https://www.byvoid.com/zhs/blog/xb-word-pron">第一篇文章</a>，之后有了OpenCC——<a href="https://www.byvoid.com/zhs/blog/open-chinese-convert">文章link</a>，在简繁字体的研究一直持续着。</p>

<p>因为没有看到合适的介绍node.js的书籍，也恰逢认识了图灵图书的编辑，于是促成了一本Node.js开发指南的诞生。这让我想到『机会总是留给有准备的人』。</p>

<p>所以成就一个牛人主要是一个人身上的某种品质——如BYVoid的钻研，而不仅仅是兴趣。</p>

<h3>一些博客链接</h3>

<ul>
<li><a href="https://www.byvoid.com/zhs/blog/new-year-2009">2008年总结</a>，2008年年末开始刷POI，2009年开始写比较长的解题报告，匈牙利算法，很认真的画了图，写了很详细，很认真</li>
<li>2009年近半年的近期总结-<a href="https://www.byvoid.com/zhs/blog/summary-2009-3">https://www.byvoid.com/zhs/blog/summary-2009-3</a></li>
<li>一次吐槽 &mdash; <a href="https://www.byvoid.com/zhs/blog/sequence-mad">https://www.byvoid.com/zhs/blog/sequence-mad</a></li>
<li>NOI2009 &mdash; <a href="https://www.byvoid.com/zhs/blog/noi-2009%EF%BC%8Chttps://www.byvoid.com/zhs/blog/noi-ssc-exp">https://www.byvoid.com/zhs/blog/noi-2009%EF%BC%8Chttps://www.byvoid.com/zhs/blog/noi-ssc-exp</a></li>
<li>语言研究的第一篇文章 &mdash; <a href="https://www.byvoid.com/zhs/blog/xb-word-pron%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%85%A2%E6%85%A2%E5%BC%80%E5%A7%8B%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E8%AF%AD%E8%A8%80%E4%BA%86%EF%BC%8C%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%80%E7%AF%87https://www.byvoid.com/zhs/blog/bh-diao-cao%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%B0%B1%E4%B8%80%E7%9B%B4%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%AE%80%E7%B9%81%E5%AD%97%E4%BD%93">https://www.byvoid.com/zhs/blog/xb-word-pron%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%85%A2%E6%85%A2%E5%BC%80%E5%A7%8B%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E8%AF%AD%E8%A8%80%E4%BA%86%EF%BC%8C%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%80%E7%AF%87https://www.byvoid.com/zhs/blog/bh-diao-cao%EF%BC%8C%E4%B9%8B%E5%90%8E%E5%B0%B1%E4%B8%80%E7%9B%B4%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%AE%80%E7%B9%81%E5%AD%97%E4%BD%93</a></li>
<li>有自己开发维护的系统：<a href="https://www.byvoid.com/zhs/blog/vakuum-dev-note-02">https://www.byvoid.com/zhs/blog/vakuum-dev-note-02</a></li>
<li>2010年6月开启了OpenCC项目 <a href="https://www.byvoid.com/zhs/blog/open-chinese-convert">https://www.byvoid.com/zhs/blog/open-chinese-convert</a></li>
<li>讲述自己与汉语 <a href="https://www.byvoid.com/zhs/blog/i-and-chinese-language">https://www.byvoid.com/zhs/blog/i-and-chinese-language</a></li>
<li>2011年11月份的博客质量很高

<ul>
<li><a href="https://www.byvoid.com/zhs/blog/godel-incompleteness-theorems-agnosticism">https://www.byvoid.com/zhs/blog/godel-incompleteness-theorems-agnosticism</a></li>
<li><a href="https://www.byvoid.com/zhs/blog/rdbms-isolation-lock-concurrency">https://www.byvoid.com/zhs/blog/rdbms-isolation-lock-concurrency</a></li>
</ul>
</li>
<li>仙剑五总结 <a href="https://www.byvoid.com/zhs/blog/pal5-comment">https://www.byvoid.com/zhs/blog/pal5-comment</a></li>
<li>写书小记 &mdash; <a href="https://www.byvoid.com/zhs/blog/compose-a-book">https://www.byvoid.com/zhs/blog/compose-a-book</a></li>
<li><a href="https://www.byvoid.com/zhs/blog/why-functional-programming">https://www.byvoid.com/zhs/blog/why-functional-programming</a></li>
<li><a href="https://www.byvoid.com/zhs/blog/i-and-chinese-language">https://www.byvoid.com/zhs/blog/i-and-chinese-language</a></li>
<li>影评山楂树之恋 <a href="https://www.byvoid.com/zhs/blog/under-the-hawthorn-tree">https://www.byvoid.com/zhs/blog/under-the-hawthorn-tree</a></li>
<li>2012年的总结 **<a href="https://www.byvoid.com/zhs/blog/recent-one-year**">https://www.byvoid.com/zhs/blog/recent-one-year**</a></li>
<li><a href="https://www.byvoid.com/blog/treasure-young-days/">https://www.byvoid.com/blog/treasure-young-days/</a></li>
<li>美国之行系列： <a href="https://www.byvoid.com/blog/usa-tour-impress">https://www.byvoid.com/blog/usa-tour-impress</a></li>
<li>海外面试经历 <a href="https://www.byvoid.com/zhs/blog/oversea-internship-interviews">https://www.byvoid.com/zhs/blog/oversea-internship-interviews</a></li>
<li>绥芬河出国 <a href="https://www.byvoid.com/zhs/blog/archive/2014/1">https://www.byvoid.com/zhs/blog/archive/2014/1</a></li>
<li><a href="http://www.qyer.com/u/1754807/footprint">http://www.qyer.com/u/1754807/footprint</a></li>
<li>整个高中的经历：

<ol>
<li> <a href="https://www.byvoid.com/zhs/blog/my-highschool-1">https://www.byvoid.com/zhs/blog/my-highschool-1</a></li>
<li> <a href="https://www.byvoid.com/blog/my-highschool-2">https://www.byvoid.com/blog/my-highschool-2</a></li>
<li> <a href="https://www.byvoid.com/blog/my-highschool-3">https://www.byvoid.com/blog/my-highschool-3</a></li>
<li> <a href="https://www.byvoid.com/blog/my-highschool-4">https://www.byvoid.com/blog/my-highschool-4</a></li>
<li> <a href="https://www.byvoid.com/blog/my-highschool-5">https://www.byvoid.com/blog/my-highschool-5</a></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[明日迷的一天]]></title>
    <link href="http://liuyix.org/blog/2014/work-review/"/>
    <updated>2014-09-13T13:09:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/work-review</id>
    <content type="html"><![CDATA[<p>上一篇博客还是在1月份，转眼已经大半年过去了。大概曾经有兴趣关注本人的也都没什么兴致了吧，呵呵。 <br/>
不禁有些感慨。 <br/>
对一个人的真正了解，无论是了解他人还是认识自己，从行动上看的最真实的。我以为自己爱写字、爱表现。可是从博客的更新频度和质量上来看，这些只是内心的美好想法，说的不好听就是“幻觉”。能真正认识自己很难。而且与这相比，更难的是认识了之后接受这样的自己。</p>

<p>前几天在微信中读到的印象很深的是李松蔚先生在微信公众账号里面的一篇文章<a href="https://app.yinxiang.com/shard/s3/sh/26f47ed4-d76e-4c39-8dd6-bda46e068ca5/733c63d816b9fbc42f341cb4b0eb0021">《框架中的拖延者（4）：希望与不满》</a>，文章中描述了生活中的一类人“明日迷”，我是非常典型的这类人。</p>

<blockquote><p>&hellip;每一位明日迷的心里都积压了深深的不满。我们对自己失望。我们懊恼，愤怒，责怪自己又浪费了时间，碌碌无为，离明日的解脱还是遥遥无期。
每一个“今天”，我们都用这种想法折磨自己，再用行动上的放纵补偿自己。</p></blockquote>

<p>这篇文章中的每一个字都几乎命中了我的每一日生活，我对现在的自己不满意，我觉得我可以做的更好，做的更努力，现在的我达不到我内心中那个满意的标准。“现在，我不满意自己”。</p>

<p>令我没有想到的是这样的“上进的”想法，我一直引以为豪，以为是我不断进步的想法竟然是给我造成痛苦的罪魁祸首。</p>

<blockquote><p>  “现在，我不满意自己。”这个念头潜移默化地，为我们带来了多少痛苦？<br/>
  让我们不快乐，让我们觉得现在这些时间毫无价值。<br/>
  让我们耽于幻想，沉迷于将来有朝一日成功后的如释重负。<br/>
  让我们忍不住泄气，自怨自艾，精神萎靡，缺乏动力。<br/>
  “啊，还是先睡一觉，先吃点零食，先刷刷淘宝，养精蓄锐再开始奋斗吧……”<br/>
  甚至于，即使有兴趣的事，快乐的事，如果当成“正事”来做，也会慢慢感觉到痛苦，感觉到肩上的担子一天比一天沉。原理很简单：做正事，我们就希望“进步”。<br/>
  而希望进步，就等于说现在，我们还不满意自己。</p></blockquote>

<p>呵呵，还是个不断恶性循环的怪圈。</p>

<ol>
<li>在“你丫连自己满意的标准还没有达到，赶紧进步”的想法中过的不快乐 &mdash;></li>
<li>转念便有了“别看你们现在这么神气，哥以后一定会成为技术新秀，藐杀所有不努力的人。”的幻想 &mdash;></li>
<li>可是&hellip;“哎呀，我还有好多书买了都没有看，连最经典最基础的都没看完，更别提读经典的代码了，事情好多啊，累觉不爱啊” &mdash;></li>
<li>压力之后，潜意识就会&hellip; “刚起床，先刷个朋友圈缓解下吧”，“在看看今天有什么新闻”，“今天周末了，看个电影放松下，前一段时间太累了，需要多休息的”，一个上午就这样消磨掉了。&mdash;></li>
<li>于是想到了“你丫连自己满意的标准还没有达到，赶紧进步！”，再次回到了开始的不快乐。</li>
</ol>


<p>产生的结果是在不快乐郁闷中，用看电影、刷微博、看朋友圈过了一上午。而且</p>

<blockquote><p>甚至于，即使有兴趣的事，快乐的事，如果当成“正事”来做，也会慢慢感觉到痛苦，感觉到肩上的担子一天比一天沉。原理很简单：做正事，我们就希望“进步”。</p></blockquote>

<p>文章的最后正写出了我们的内心写照：</p>

<blockquote><p>一旦把目光放到未来的进步，对此刻的不满就难以避免。“勤奋小人”和“懒惰小人”会立刻开战。而我们已经知道了，一旦被这场希望与不满的战争席卷，我们的内心便会天昏地暗，永无宁日。做事的乐趣破坏殆尽，我们背着沉重的包袱，举步维艰。</p></blockquote>

<p>万万没想到，优秀青年具有的上进的想法是事实上自己不是很上进的心理根源。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xtrabackup]]></title>
    <link href="http://liuyix.org/blog/2014/xtrabackup/"/>
    <updated>2014-08-16T09:43:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/xtrabackup</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMP L1 Cache MESI Coherence Protocol Internal]]></title>
    <link href="http://liuyix.org/blog/2014/cache-internal-professional/"/>
    <updated>2014-01-07T15:02:00+08:00</updated>
    <id>http://liuyix.org/blog/2014/cache-internal-professional</id>
    <content type="html"><![CDATA[<h2>Gem5 Simulator Ruby Memory System</h2>

<p>Ruby Memory</p>

<h2>基于Directory的SMP L1 Cache MESI协议的内部实现</h2>

<p><strong>Directory</strong> :
<strong>SMP</strong> :
<strong>L1</strong> :</p>

<p><img src="http://liuyix.org/images/Diagrama_MESI.gif" alt="/images/Diagrama_MESI.gif" /></p>

<p>而实际上<strong>SMP架构</strong>中的MESI具有多个<em>瞬时状态</em> ,在研究Gem5模拟器中集成的<em>Ruby Memory System Simulator</em>的实现，根据协议实现代码，我得到了以下添加了瞬时状态后的有限状态机图示（ <strong>该图依然为简化后的图，其中省略了自旋状态转换</strong> ，这样看起来更清晰些）</p>

<p><img src="http://liuyix.org/images/MESI-orig.png" alt="MESI" /></p>

<p>当然这依然不是最终实现的结构，该图并没有考虑目前已经广泛应用在各种处理器上的 <em>Prefetcher</em>
本文之后会介绍这些 <em>State</em> 以及对应的 <em>Event</em> 。</p>
]]></content>
  </entry>
  
</feed>
